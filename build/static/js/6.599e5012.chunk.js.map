{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Button/ButtonChangePassword.js","assets/users/users.js","pages/ProfileConfiguration.js","assets/images/logo.svg","assets/images/fruits-vegetables-basket-by-oblik-studio.svg","assets/images/bitmap.png","components/Header/Header.js","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","Object","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","ButtonChangePassword","USERS","id","email","password","ProfileConfiguration","props","handleChange","e","preventDefault","state","currentPassword","newPassword","errors","confirmPassword","push","validate","setState","changeUserInfo","user","_id","userId","fetch","method","headers","authorization","localStorage","getItem","body","JSON","stringify","then","response","json","res","success","error","redirect","Verify","isExpired","token","decodedToken","jwt","decode","complete","dateNow","Date","payload","exp","getTime","componentDidMount","loadUserInfo","data","this","to","className","Header","Navbar","src","fruits","alt","placeholder","value","onChange","evt","target","type","onClick","Component","blob","history","Fragment","logo","ButtonHistory","ButtonProfil","ButtonScan","Scanner","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","switchCamera","num","Quagga","stop","QuaggaInit","deviceId","a","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","filter","d","kind","videoDevices","label","match","capabilities","map","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","err","console","log","Promise","all","capa","sort","b","width","max","height","init","inputStream","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","codeResult","code","setImport","offDetected","textImage","withIcon","withPreview","buttonText","imgExtension","maxFileSize","labelClass","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","quagga","_scan","showScanner","handleScan","split","handleError","displayQrCode","delay","onError","onScan","style","showViewFinder","displayBarCode","switchReader","updateWindowDimensions","innerHeight","handleScannerButton","bool","render","pathname","addEventListener","removeEventListener","React"],"mappings":"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","file":"static/js/6.599e5012.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\n\nfunction ButtonChangePassword() {\n  return (\n  <div>\n    Changer mot de passe\n  </div>\n  );\n}\n\nexport default ButtonChangePassword;","export const USERS =\n    {\n        id: 0,\n        email: \"bububu@bababa.com\",\n        password: \"123456\"\n    };","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport ButtonChangePassword from \"../components/Button/ButtonChangePassword\";\nimport fruits from \"../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\nimport Header from \"../components/Header/Header\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport \"./ProfileConfiguration.css\";\nimport { USERS } from \"../assets/users/users\";\nimport jwt from \"jsonwebtoken\";\nimport { Link } from \"react-router-dom\";\n\nfunction validate(newPassword, confirmPassword) {\n    const errors = [];\n    if (newPassword.length < 6) {\n        errors.push(<p>Entre un mot de passe. 6 caractères minimum requis</p>);\n    }\n    if (newPassword !== confirmPassword) {\n        errors.push(<p>Les mots de passe ne correspondent pas</p>);\n    }\n    return errors;\n}\n\nclass ProfileConfiguration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: USERS,\n            currentPassword: \"\",\n            newPassword: \"\",\n            confirmPassword: \"\",\n            errors: [],\n            redirect: false,\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const { currentPassword, newPassword, confirmPassword } = this.state;\n        const errors = validate(newPassword, confirmPassword);\n        //console.log(this.state.user.email, currentPassword, newPassword, confirmPassword, errors);\n        this.setState({ errors });\n        if (errors.length === 0) {\n            this.changeUserInfo(this.state.user._id, currentPassword, newPassword);\n        }\n    };\n\n    changeUserInfo = (userId, currentPassword, newPassword) => {\n        //console.log(\"hey\");\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}`,\n            // `http://localhost:8080/api/v1/users/login`,\n            {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    authorization: localStorage.getItem(\"token\"),\n                },\n                body: JSON.stringify({\n                    currentPassword: currentPassword,\n                    newPassword: newPassword,\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                if (res.success === false) {\n                    this.setState({\n                        errors: [...this.state.errors, res.error],\n                    });\n                } else {\n                    this.setState({ redirect: true });\n                }\n            });\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === true) {\n            this.setState({ redirect: true }); // redirection vers la page login\n        }\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n        let userId = localStorage.getItem(\"userId\");\n        if (userId) {\n            this.loadUserInfo(userId);\n        }\n    };\n\n    loadUserInfo = (userId) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}`,\n            // `http://localhost:8080/api/v1/users/login`,\n            {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    authorization: localStorage.getItem(\"token\"),\n                },\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n\n                this.setState({ user: res.data });\n            });\n    };\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to=\"/profil\" />;\n        }\n        //console.log(this.state.redirect);\n        return (\n            <div className=\"screen\">\n                <Link to=\"/\">\n                    <Header />\n                </Link>\n                <Navbar />\n                <div className=\"logo-fruits\">\n                    <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                </div>\n                <Link className=\"back-button\" to=\"/profil\">\n                    {\"< Retour\"}\n                </Link>\n                <div className=\"configuration-screen-title\"></div>\n                <div className=\"errors-change-password\">{this.state.errors}</div>\n                <div className=\"configuration-container\">\n                    <div className=\"configuration-email-block\">\n                        <div>email</div>\n                        <div>{this.state.user.email}</div>\n                    </div>\n                    <form className=\"configuration-form\">\n                        <label>\n                            {/* Mot de passe actuel */}\n                            <input\n                                placeholder=\"mot de passe actuel\"\n                                className=\"input-forms\"\n                                value={this.state.currentPassword}\n                                onChange={(evt) =>\n                                    this.setState({\n                                        currentPassword: evt.target.value,\n                                    })\n                                }\n                                type=\"password\"\n                            />\n                        </label>\n                        <label>\n                            {/* Nouveau mot de passe */}\n                            <input\n                                value={this.state.newPassword}\n                                className=\"input-forms\"\n                                onChange={(evt) =>\n                                    this.setState({\n                                        newPassword: evt.target.value,\n                                    })\n                                }\n                                type=\"password\"\n                                placeholder=\"nouveau mot de passe\"\n                            />\n                        </label>\n                        <label>\n                            {/* Confirmation de mot de passe */}\n                            <input\n                                placeholder=\"confirmation de mdp\"\n                                className=\"input-forms\"\n                                value={this.state.confirmPassword}\n                                onChange={(evt) =>\n                                    this.setState({\n                                        confirmPassword: evt.target.value,\n                                    })\n                                }\n                                type=\"password\"\n                            />\n                        </label>\n                        <Link className=\"button-change-password\" onClick={this.handleChange} to=\"\">\n                            <ButtonChangePassword />\n                        </Link>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\nexport default ProfileConfiguration;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","export default __webpack_public_path__ + \"static/media/fruits-vegetables-basket-by-oblik-studio.7d5e1c64.svg\";","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const camera = urlParams.get(\"camera\");\n        if (camera == \"false\") {\n            this.setState({ error: true, text: 1 });\n        } else if (\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia\n        ) {\n            // On vient récupérer les flux vidéo existants\n            let devices = await navigator.mediaDevices.enumerateDevices().then(function (devices) {\n                return devices.filter((d) => d.kind === \"videoinput\");\n            });\n            this.setState({ devices: devices });\n\n            //On prend seulement les caméras arrière\n            //(toutes les caméra si caméra arrière non existante)\n            let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n            if (videoDevices.length === 0) {\n                this.setState({ noBackCamera: true });\n                videoDevices = devices;\n            }\n\n            // Get all camera capabilities\n            let capabilities = videoDevices.map(async (device) => {\n                return await navigator.mediaDevices\n                    .getUserMedia({\n                        video: { deviceId: { exact: device.deviceId } },\n                    })\n                    .then(\n                        (stream) => {\n                            let a = stream.getVideoTracks().map((track) => {\n                                return track.getCapabilities();\n                            });\n                            stream.getTracks().forEach((track) => track.stop());\n                            if (a.length > 1) this.setState({ mutlipleTracks: true });\n                            return a[0];\n                        },\n                        (err) => console.log(err)\n                    );\n            });\n            let capa = await Promise.all(capabilities);\n\n            //On trie les capabilities pour mettre les meilleurs résolutions en premier\n            capa.sort((a, b) => {\n                if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2) return -1;\n                else return 1;\n            });\n\n            if (capa[0]) this.QuaggaInit(capa[0]);\n            else this.QuaggaInit({});\n        } else {\n            this.setState({ error: true, text: 3 });\n        }\n    };\n\n    QuaggaInit = (capabilities) => {\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    this.setState({ error: true, text: err + \" \" + JSON.stringify(capabilities) });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"} />\n\n                {/* {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )} */}\n                {/* {!this.state.error ? (\n                    <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        clique ici si tu souhaite importer une image\n                    </button>\n                ) : (\n                    \"\"\n                )} */}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        <ImageUploader\n                            withIcon={true}\n                            withPreview={false}\n                            buttonText={\n                                <div className=\"button-import\">\n                                    <div className=\"material-icons\">add_a_photo</div>\n                                    <p>Prendre une photo</p>\n                                </div>\n                            }\n                            onChange={this.onDrop}\n                            label={\"\"}\n                            imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                            maxFileSize={5242880}\n                            labelClass={\"import-label\"}\n                        />\n                        <p className=\"red\">{textImage}</p>\n                        <p className=\"error-message-import\">\n                            {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                            {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                            {\"code d'erreur : \" + this.state.text}\n                            <br />\n                        </p>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.mutlipleTracks ? (\n                    <h1 className=\"debug\">If you see this, tell me</h1>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n"],"sourceRoot":""}