{"version":3,"sources":["pages/Debug.js","assets/images/logo.svg","assets/images/bitmap.png","components/Header/Header.js","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["Debug","render","to","className","React","Component","Header","props","src","blob","alt","history","Fragment","logo","ButtonHistory","ButtonProfil","ButtonScan","Scanner","state","error","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","switchCamera","num","length","setState","Quagga","stop","QuaggaInit","deviceId","componentDidMount","a","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","then","filter","d","kind","videoDevices","label","match","capabilities","map","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","err","console","log","Promise","all","capa","sort","b","width","max","height","init","inputStream","type","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","codeResult","code","setImport","offDetected","this","textImage","id","withIcon","withPreview","buttonText","onChange","imgExtension","maxFileSize","labelClass","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","quagga","_scan","res","fetch","response","json","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","showViewFinder","displayBarCode","i","switchReader","onClick","Navbar","updateWindowDimensions","innerHeight","handleScannerButton","bool","pathname","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/13.fb29d13e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Debug.css\";\nimport \"./Profil.css\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Header/Header\";\nimport Navbar from \"../components/Navbar/Navbar\";\n\nclass Debug extends React.Component {\n    render = () => {\n        return (\n            <div>\n                <Link to=\"/\">\n                    <Header />\n                </Link>\n\n                <Navbar />\n                <div className=\"debug-container\">\n                    <h1> Problèmes de Caméra </h1>\n                    <h2>Ma caméra n'est pas activée</h2>\n                    <p> </p>\n                    <h2>Ma caméra est activée mais le code barre n'est pas détecté</h2>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Debug;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const camera = urlParams.get(\"camera\");\n        if (camera == \"false\") {\n            this.setState({ error: true, text: 1 });\n        } else if (\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia\n        ) {\n            // On vient récupérer les flux vidéo existants\n            let devices = await navigator.mediaDevices.enumerateDevices().then(function (devices) {\n                return devices.filter((d) => d.kind === \"videoinput\");\n            });\n            this.setState({ devices: devices });\n\n            //On prend seulement les caméras arrière\n            //(toutes les caméra si caméra arrière non existante)\n            let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n            if (videoDevices.length === 0) {\n                this.setState({ noBackCamera: true });\n                videoDevices = devices;\n            }\n\n            // Get all camera capabilities\n            let capabilities = videoDevices.map(async (device) => {\n                return await navigator.mediaDevices\n                    .getUserMedia({\n                        video: { deviceId: { exact: device.deviceId } },\n                    })\n                    .then(\n                        (stream) => {\n                            let a = stream.getVideoTracks().map((track) => {\n                                return track.getCapabilities();\n                            });\n                            stream.getTracks().forEach((track) => track.stop());\n                            if (a.length > 1) this.setState({ mutlipleTracks: true });\n                            return a[0];\n                        },\n                        (err) => console.log(err)\n                    );\n            });\n            let capa = await Promise.all(capabilities);\n\n            //On trie les capabilities pour mettre les meilleurs résolutions en premier\n            capa.sort((a, b) => {\n                if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2) return -1;\n                else return 1;\n            });\n\n            if (capa[0]) this.QuaggaInit(capa[0]);\n            else this.QuaggaInit({});\n        } else {\n            this.setState({ error: true, text: 3 });\n        }\n    };\n\n    QuaggaInit = (capabilities) => {\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    this.setState({ error: true, text: 4 });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"} />\n\n                {/* {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )} */}\n                {/* {!this.state.error ? (\n                    <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        clique ici si tu souhaite importer une image\n                    </button>\n                ) : (\n                    \"\"\n                )} */}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        <ImageUploader\n                            withIcon={true}\n                            withPreview={false}\n                            buttonText={\n                                <div className=\"button-import\">\n                                    <div className=\"material-icons\">add_a_photo</div>\n                                    <p>Prendre une photo</p>\n                                </div>\n                            }\n                            onChange={this.onDrop}\n                            label={\"\"}\n                            imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                            maxFileSize={5242880}\n                            labelClass={\"import-label\"}\n                        />\n                        <p className=\"red\">{textImage}</p>\n                        <p className=\"error-message-import\">\n                            {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                            {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                            {\"code d'erreur : \" + this.state.text}\n                            <br />\n                        </p>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.mutlipleTracks ? (\n                    <h1 className=\"debug\">If you see this, tell me</h1>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n"],"sourceRoot":""}