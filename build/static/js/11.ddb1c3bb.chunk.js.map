{"version":3,"sources":["components/Charts/DoughnutChartEcoScore.js","components/Charts/BarChartCarbonImpact.js","pages/Statistics.js","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js","assets/images/fruits-vegetables-basket-by-oblik-studio.svg"],"names":["DoughnutChartEcoScore","state","swiper","undefined","selectedSegment","displayChart","chart","Fragment","props","ecoScoreData","cartedProduct","data","title","value","a","color","b","c","d","e","unknown","lineWidth","paddingAngle","radius","PieChart","defaultProps","animate","animationDuration","label","dataEntry","Math","round","percentage","labelStyle","index","fontSize","fontFamily","fill","labelPosition","segmentsStyle","transition","cursor","segmentsShift","onClick","event","setState","slideTo","className","src","fruits","alt","onSlideChange","displaySlides","slides","render","spaceBetween","slidesPerView","centeredSlides","i","activeIndex","onSwiper","React","Component","monthNames","BarChartCarbonImpact","options","toolbar","show","dropShadow","enabled","top","left","blur","opacity","plotOptions","bar","borderRadius","horizontal","xaxis","categories","labels","style","fontColor","text","yaxis","dataLabels","noData","colors","grid","lines","carbonImpactData","now","dataSize","length","unit","Date","setHours","setDate","getDate","getDay","yearStart","getFullYear","ceil","push","getMonth","year","monthNum","toString","series","name","sortedData","sort","offset","finalValue","impact","toFixed","nbProducts","type","height","Statistics","username","scannedProduct","userId","Verify","isExpired","token","localStorage","getItem","decodedToken","jwt","decode","complete","dateNow","payload","exp","getTime","connected","componentDidMount","loadUserData","loadEcoScoreData","loadCarbonImpactData","fetch","method","credentials","headers","Headers","authorization","then","response","json","res","typeAggregate","statistics","ecoscore","carbonImpact","displayStats","handleChange","newValue","displayNavbar","to","Navbar","ButtonHistory","ButtonProfil","ButtonScan","Scanner","error","usedCamera","devices","processingImage","switchCamera","num","Quagga","stop","QuaggaInit","deviceId","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","videoDevices","forEach","device","kind","match","maxResolution","video","exact","stream","getVideoTracks","track","capabilities","getCapabilities","max","usedCameraId","getTracks","err","console","log","width","init","inputStream","constraints","focusMode","min","aspectRatio","locator","patchSize","halfSample","locate","area","right","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","codeResult","code","offDetected","this","id","withIcon","withPreview","buttonText","onChange","imgExtension","maxFileSize","href","Scan","scanning","status","results","reading","barcode","bcProductId","quagga","_scan","showScanner","handleScan","arr","split","handleError","displayQrCode","delay","onError","onScan","showViewFinder","displayBarCode","map","switchReader","updateWindowDimensions","innerHeight","handleScannerButton","bool","history","pathname","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/11.ddb1c3bb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n// Import Swiper styles\nimport \"swiper/swiper-bundle.css\";\n\n//Import Pie Chart\nimport { PieChart } from \"react-minimal-pie-chart\";\n\nimport fruits from \"../../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\n\nclass DoughnutChartEcoScore extends React.Component {\n    state = {\n        swiper: undefined,\n        selectedSegment: undefined,\n    };\n\n    displayChart = () => {\n        let chart = <React.Fragment></React.Fragment>;\n        if (this.props.ecoScoreData && this.props.cartedProduct > 0) {\n            let data = [\n                {\n                    title: \"EcoScore A\",\n                    value: this.props.ecoScoreData.a,\n                    color: \"#1e8f4f\",\n                },\n                {\n                    title: \"EcoScore B\",\n                    value: this.props.ecoScoreData.b,\n                    color: \"#5fad0c\",\n                },\n                {\n                    title: \"EcoScore C\",\n                    value: this.props.ecoScoreData.c,\n                    color: \"#ecb10f\",\n                },\n                {\n                    title: \"EcoScore D\",\n                    value: this.props.ecoScoreData.d,\n                    color: \"#ff6f1e\",\n                },\n                {\n                    title: \"EcoScore E\",\n                    value: this.props.ecoScoreData.e,\n                    color: \"#df1e1f\",\n                },\n                {\n                    title: \"EcoScore Inconnu\",\n                    value: this.props.ecoScoreData.unknown,\n                    color: \"#000000\",\n                },\n            ];\n            chart = (\n                <PieChart\n                    data={data}\n                    lineWidth={30}\n                    paddingAngle={1}\n                    radius={PieChart.defaultProps.radius - 3}\n                    animate\n                    animationDuration={700}\n                    label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\n                    labelStyle={(index) =>\n                        index == this.state.selectedSegment\n                            ? {\n                                  fontSize: \"6px\",\n                                  fontFamily: \"comfortaa\",\n                                  fill: data[index].color,\n                              }\n                            : {\n                                  fontSize: \"0px\",\n                                  fontFamily: \"comfortaa\",\n                                  fill: data[index].color,\n                              }\n                    }\n                    labelPosition={60}\n                    segmentsStyle={{\n                        transition: \"stroke .3s ease-out\",\n                        cursor: \"pointer\",\n                    }}\n                    segmentsShift={(index) => (index == this.state.selectedSegment ? 3 : 0)}\n                    onClick={(event, index) => {\n                        if (index == this.state.selectedSegment) {\n                            this.setState({ selectedSegment: undefined });\n                            this.state.swiper.slideTo(0, 500);\n                        } else {\n                            this.setState({ selectedSegment: index });\n                            this.state.swiper.slideTo(index + 1, 500);\n                        }\n                    }}\n                />\n            );\n        } else {\n            chart = (\n                <div className=\"stats-no-product\">\n                    <div>\n                        <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                        <p className=\"logo-text\">Commence à scanner des produits !</p>\n                    </div>\n                </div>\n            );\n        }\n        return chart;\n    };\n\n    onSlideChange = (index) => {\n        if (index == 0) {\n            this.setState({ selectedSegment: undefined });\n        } else {\n            this.setState({ selectedSegment: index - 1 });\n        }\n    };\n\n    displaySlides = () => {\n        let slides = <React.Fragment></React.Fragment>;\n        if (this.props.ecoScoreData && this.props.cartedProduct > 0) {\n            slides = (\n                <React.Fragment>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <img\n                                className=\"stats-ecoscore-full\"\n                                src=\"/images/utils/ecoScoreFull.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore A : {this.props.ecoScoreData.a}{\" \"}\n                                {this.props.ecoScoreData.a > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreA.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore B : {this.props.ecoScoreData.b}{\" \"}\n                                {this.props.ecoScoreData.b > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreB.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore C : {this.props.ecoScoreData.c}{\" \"}\n                                {this.props.ecoScoreData.c > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreC.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore D : {this.props.ecoScoreData.d}{\" \"}\n                                {this.props.ecoScoreData.d > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreD.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore E : {this.props.ecoScoreData.e}{\" \"}\n                                {this.props.ecoScoreData.e > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreE.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore Inconnu : {this.props.ecoScoreData.unknown}{\" \"}\n                                {this.props.ecoScoreData.unknown > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                        </div>\n                    </SwiperSlide>\n                </React.Fragment>\n            );\n        }\n        return slides;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                <div className=\"stats-chart-pie\">{this.displayChart()}</div>\n                <div className=\"stats-chart-slider\">\n                    <Swiper\n                        spaceBetween={0}\n                        slidesPerView={1}\n                        centeredSlides={true}\n                        onSlideChange={(i) => this.onSlideChange(i.activeIndex)}\n                        onSwiper={(swiper) => this.setState({ swiper: swiper })}\n                    >\n                        {this.displaySlides()}\n                    </Swiper>\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default DoughnutChartEcoScore;\n","import React from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n// Import Swiper styles\nimport \"swiper/swiper-bundle.css\";\n\n//Import Bar Chart\nimport Chart from \"react-apexcharts\";\n\nimport fruits from \"../../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\n\nconst monthNames = [\n    \"Janvier\",\n    \"Février\",\n    \"Mars\",\n    \"Avril\",\n    \"Mai\",\n    \"Juin\",\n    \"Juillet\",\n    \"Août\",\n    \"Septembre\",\n    \"Octobre\",\n    \"Novembre\",\n    \"Décembre\",\n];\n\nclass BarChartCarbonImpact extends React.Component {\n    state = {\n        selectedSegment: 0,\n        options: {\n            chart: {\n                toolbar: {\n                    show: false,\n                },\n                dropShadow: {\n                    enabled: true,\n                    top: 0,\n                    left: 0,\n                    blur: 2,\n                    opacity: 0.5,\n                },\n            },\n            plotOptions: {\n                bar: {\n                    borderRadius: 5,\n                    horizontal: true,\n                },\n            },\n            xaxis: {\n                categories: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\"],\n                labels: {\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n                title: {\n                    text: \"CO₂ équivalent (kg)\",\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n            },\n            dataLabels: {\n                enabled: true,\n                style: {\n                    fontSize: \"10px\",\n                    fontFamily: \"Comfortaa\",\n                },\n            },\n            noData: {\n                text: \"Chargement...\",\n            },\n            fill: {\n                colors: [\"#ff914d\"],\n            },\n            grid: {\n                xaxis: {\n                    lines: {\n                        show: true,\n                    },\n                },\n                yaxis: {\n                    lines: {\n                        show: false,\n                    },\n                },\n            },\n        },\n    };\n\n    displayChart = () => {\n        let chart = <React.Fragment></React.Fragment>;\n        if (this.props.carbonImpactData && this.props.cartedProduct > 0) {\n            let dataSize = this.props.carbonImpactData.data.length;\n            let xaxis = [];\n            let now;\n\n            switch (this.props.carbonImpactData.unit) {\n                case \"weekly\":\n                    let d = new Date();\n                    d.setHours(0, 0, 0, 0);\n                    d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n                    let yearStart = new Date(d.getFullYear(), 0, 1);\n                    now = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push(\"Semaine \" + (now - i));\n                    }\n                    break;\n                case \"monthly\":\n                    now = new Date().getMonth();\n                    let year = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        let monthNum = now - i;\n                        if (monthNum < 0) {\n                            xaxis.push(monthNames[monthNum + 12] + \" \" + (year - 1));\n                        } else {\n                            xaxis.push(monthNames[monthNum] + \" \" + year);\n                        }\n                    }\n                    break;\n                case \"yearly\":\n                    now = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push((now - i).toString());\n                    }\n                    break;\n                default:\n                    now = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push((now - i).toString());\n                    }\n                    break;\n            }\n            this.state.options.xaxis.categories = xaxis;\n\n            let series = [\n                {\n                    name: \"CO₂ équivalent (kg)\",\n                    data: [],\n                },\n            ];\n\n            let sortedData = this.props.carbonImpactData.data;\n            sortedData.sort((a, b) => (a.offset > b.offset ? 1 : -1));\n\n            for (let i = 0; i < sortedData.length; i++) {\n                let finalValue =\n                    this.state.selectedSegment === 0\n                        ? sortedData[i].impact.toFixed(2)\n                        : (sortedData[i].impact / sortedData[i].nbProducts).toFixed(2);\n                series[0].data.push(finalValue);\n            }\n\n            chart = (\n                <React.Fragment>\n                    <div className=\"stats-chart-bar\">\n                        <Chart\n                            options={this.state.options}\n                            series={series}\n                            type=\"bar\"\n                            height={350}\n                        ></Chart>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            chart = (\n                <div className=\"stats-no-product\">\n                    <div>\n                        <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                        <p className=\"logo-text\">Commence à scanner des produits !</p>\n                    </div>\n                </div>\n            );\n        }\n        return chart;\n    };\n\n    onSlideChange = (index) => {\n        this.setState({ selectedSegment: this.state.selectedSegment === 0 ? 1 : 0 });\n    };\n\n    displaySlides = () => {\n        let slides = <React.Fragment></React.Fragment>;\n        if (this.props.carbonImpactData && this.props.cartedProduct > 0) {\n            slides = (\n                <React.Fragment>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">{\">\"} Impact Carbone total</span>\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} Impact Carbone par produit\n                            </span>\n                        </div>\n                    </SwiperSlide>\n                </React.Fragment>\n            );\n        }\n        return slides;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                {this.displayChart()}\n                <div className=\"stats-chart-slider\">\n                    <Swiper\n                        spaceBetween={0}\n                        slidesPerView={1}\n                        centeredSlides={true}\n                        onSlideChange={(i) => this.onSlideChange(i.activeIndex)}\n                        onSwiper={(swiper) => this.setState({ swiper: swiper })}\n                    >\n                        {this.displaySlides()}\n                    </Swiper>\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default BarChartCarbonImpact;\n","import React from \"react\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport DoughnutChartEcoScore from \"../components/Charts/DoughnutChartEcoScore\";\nimport BarChartCarbonImpact from \"../components/Charts/BarChartCarbonImpact\";\nimport \"./Product.css\";\nimport { Link } from \"react-router-dom\";\nimport jwt from \"jsonwebtoken\";\nimport \"./Statistics.css\";\n\nclass Statistics extends React.Component {\n    state = {\n        ecoScoreData: undefined,\n        carbonImpactData: undefined,\n        username: undefined,\n        scannedProduct: undefined,\n        cartedProduct: undefined,\n        userId: undefined,\n        value: 0,\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === false) {\n            this.setState({ connected: true });\n        }\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n        let userId = localStorage.getItem(\"userId\");\n        if (userId) {\n            this.setState({ userId: userId });\n        }\n        this.loadUserData(userId);\n        this.loadEcoScoreData(userId, \"fromBeginning\");\n        this.loadCarbonImpactData(userId, \"fromBeginning\");\n    };\n\n    loadUserData = (userId) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}`,\n            // `http://localhost:8080/api/v1/users/${userId}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    username: res?.data?.username,\n                    scannedProduct: res?.scannedProduct,\n                    cartedProduct: res?.cartedProduct,\n                });\n            });\n    };\n\n    loadEcoScoreData = (userId, typeAggregate) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}/statistics?typeStatistic=ecoscore&typeAggregate=${typeAggregate}`,\n            // `http://localhost:8080/api/v1/users/${userId}/statistics?typeStatistic=ecoscore&typeAggregate=${typeAggregate}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    ecoScoreData: res?.statistics?.ecoscore,\n                });\n            });\n    };\n\n    loadCarbonImpactData = (userId, typeAggregate) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}/statistics?typeStatistic=carbonImpact&typeAggregate=${typeAggregate}`,\n            // `http://localhost:8080/api/v1/users/${userId}/statistics?typeStatistic=carbonImpact&typeAggregate=${typeAggregate}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    carbonImpactData: res?.statistics?.carbonImpact,\n                });\n            });\n    };\n\n    displayStats = () => {\n        let scannedProduct = <React.Fragment />;\n        let cartedProduct = <React.Fragment />;\n\n        if (this.state.scannedProduct !== undefined) {\n            scannedProduct = (\n                <div className=\"stats-header-text\">\n                    <span className={\"circle-stats color_score_stats\"}>⬤ </span>\n                    {this.state.scannedProduct > 1 ? \"Produits scannés :\" : \"Produit scanné :\"}\n                    <span className=\"uppercase \"> {this.state.scannedProduct}</span>\n                </div>\n            );\n        }\n\n        if (this.state.cartedProduct !== undefined) {\n            cartedProduct = (\n                <div className=\"stats-header-text\">\n                    <span className={\"circle-stats color_score_stats\"}>⬤ </span>\n                    {this.state.cartedProduct > 1 ? \"Produits achetés :\" : \"Produit acheté :\"}\n                    <span className=\"uppercase \"> {this.state.cartedProduct}</span>\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {scannedProduct}\n                {cartedProduct}\n            </React.Fragment>\n        );\n    };\n\n    handleChange = (event, newValue) => {\n        this.setState({ value: newValue });\n    };\n\n    displayNavbar = () => {\n        let retour = (\n            <div className=\"stats-navbar-container\">\n                <button\n                    className={\n                        this.state.value === 0\n                            ? \"stats-navbar-button selected\"\n                            : \"stats-navbar-button\"\n                    }\n                    onClick={() => this.handleChange(\"\", 0)}\n                >\n                    EcoScore\n                </button>\n                <button\n                    className={\n                        this.state.value === 1\n                            ? \"stats-navbar-button selected\"\n                            : \"stats-navbar-button\"\n                    }\n                    onClick={() => this.handleChange(\"\", 1)}\n                >\n                    Impact Carbone\n                </button>\n                <div\n                    className={\n                        this.state.value === 0 ? \"navbar-under nav-left\" : \"navbar-under nav-right\"\n                    }\n                ></div>\n            </div>\n        );\n        return retour;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                <div className=\"stats-page-container\">\n                    <div className=\"stats-header-container\">\n                        <div className=\"stats-profil-link\">\n                            <Link to=\"/profil\"> {\"<\"} Profil</Link>\n                        </div>\n                        <img className=\"stats-bitmap-image\" src=\"/images/utils/bitmap.png\" alt=\"\" />\n                    </div>\n\n                    <div className=\"stats-welcome\">\n                        <span className=\"stats-welcome-text\">\n                            {this.state.username\n                                ? this.state.username + \", voici ton récapitulatif Lowympact...\"\n                                : \"\"}\n                        </span>\n                    </div>\n\n                    <div className=\"stats-text-container\">{this.displayStats()}</div>\n\n                    {this.displayNavbar()}\n\n                    {this.state.value === 0 ? (\n                        <DoughnutChartEcoScore\n                            ecoScoreData={this.state.ecoScoreData}\n                            scannedProduct={this.state.scannedProduct}\n                            cartedProduct={this.state.cartedProduct}\n                        ></DoughnutChartEcoScore>\n                    ) : (\n                        <BarChartCarbonImpact\n                            carbonImpactData={this.state.carbonImpactData}\n                            scannedProduct={this.state.scannedProduct}\n                            cartedProduct={this.state.cartedProduct}\n                        ></BarChartCarbonImpact>\n                    )}\n\n                    <Navbar />\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default Statistics;\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: false,\n        text: 0,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const camera = urlParams.get(\"camera\");\n        if (camera == \"false\") {\n            this.setState({ error: true, text: 1 });\n        } else if (\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia\n        ) {\n            let usedCameraId;\n            const devices = await navigator.mediaDevices\n                .enumerateDevices()\n                .then(function (devices) {\n                    return devices;\n                });\n            let videoDevices = [];\n            devices.forEach((device) => {\n                if (device.kind === \"videoinput\") {\n                    if (device.label.match(/back/) != null) {\n                        videoDevices.push(device);\n                        //     ////console.log(\"Found video device: \" + JSON.stringify(device));\n                    }\n                }\n            });\n            // ALL  cameras\n            //console.log(videoDevices);\n            this.setState({ devices: videoDevices });\n\n            // open every video device and dump its characteristics\n            let maxResolution = -1;\n            for (let i in videoDevices) {\n                const device = videoDevices[i];\n                // //console.log(\"Opening video device \" + device.deviceId + \" (\" + device.label + \")\");\n\n                await navigator.mediaDevices\n                    .getUserMedia({\n                        video: { deviceId: { exact: device.deviceId } },\n                    })\n                    .then(\n                        (stream) => {\n                            stream.getVideoTracks().forEach((track) => {\n                                const capabilities = track.getCapabilities();\n\n                                if (\n                                    capabilities.height.max >= maxResolution &&\n                                    device.label.match(/back/) != null\n                                ) {\n                                    maxResolution = capabilities.height.max;\n                                    usedCameraId = device.deviceId;\n                                    this.setState({ usedCamera: i });\n                                }\n\n                                ////console.log(\"Track capabilities: \" + JSON.stringify(capabilities));\n                            });\n\n                            stream.getTracks().forEach((track) => track.stop());\n                        },\n                        (err) => console.log(err)\n                    );\n            }\n            if (videoDevices.length > 0) {\n                this.QuaggaInit(usedCameraId);\n            } else {\n                this.setState({ error: true, text: 2 });\n            }\n        } else {\n            this.setState({ error: true, text: 3 });\n        }\n    };\n\n    QuaggaInit = (usedCameraId, width = 1920, height = 1080) => {\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        deviceId: usedCameraId,\n                        focusMode: \"continuous\",\n                        width: { min: width },\n                        height: { min: height },\n                        aspectRatio: {\n                            min: 1,\n                            max: 2,\n                        },\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"30%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"30%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                debug: {\n                    drawBoundingBox: true,\n                    showFrequency: true,\n                    drawScanline: true,\n                    showPattern: true,\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    //console.log(err);\n                    if (width != 960 && height != 540) {\n                        this.QuaggaInit(usedCameraId, 960, 540);\n                        // console.log(\"here\");\n                    } else {\n                        this.setState({ error: true, text: 4 });\n                    }\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            this.setState({ processingImage: true });\n            console.log(image[image.length - 1]);\n            let reader = new FileReader();\n            reader.readAsDataURL(image[image.length - 1]);\n            reader.onloadend = () => {\n                Quagga.decodeSingle(\n                    {\n                        decoder: {\n                            readers: [\"ean_reader\"], // List of active readers\n                        },\n                        locate: true, // try to locate the barcode in the image\n                        src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                    },\n                    (result) => {\n                        console.log(result);\n                        if (result) {\n                            this._onDetected(result);\n                            console.log(\"result\", result.codeResult?.code);\n                        } else {\n                            console.log(\"not detected\");\n                        }\n                    }\n                );\n            };\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className=\"viewport\" />\n\n                {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        <ImageUploader\n                            withIcon={true}\n                            withPreview={false}\n                            buttonText=\"Importer une image\"\n                            onChange={this.onDrop}\n                            imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                            maxFileSize={5242880}\n                        />\n                        <p>\n                            Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a>\n                            <br />\n                            {\"code d'erreur : \" + this.state.text}\n                        </p>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n","export default __webpack_public_path__ + \"static/media/fruits-vegetables-basket-by-oblik-studio.7d5e1c64.svg\";"],"sourceRoot":""}