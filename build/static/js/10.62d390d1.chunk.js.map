{"version":3,"sources":["pages/Avis.js","assets/images/logo.svg","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js","components/Header/Header.js","assets/images/bitmap.png"],"names":["Avis","state","value","sent","componentDidMount","Verify","isExpired","token","localStorage","getItem","decodedToken","jwt","decode","complete","dateNow","Date","payload","exp","getTime","clear","props","history","push","setValue","input","setState","target","send","userId","fetch","method","credentials","headers","Headers","Authorization","body","JSON","stringify","message","then","response","json","res","console","log","success","render","button","Fragment","onClick","to","className","placeholder","maxLength","onChange","React","Component","ButtonHistory","ButtonProfil","ButtonScan","Scanner","error","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","no_permission","switchCamera","num","length","Quagga","stop","QuaggaInit","deviceId","a","capabilities","Object","keys","init","inputStream","type","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","window","navigator","hardwareConcurrency","decoder","readers","multiple","singleChannel","err","start","setQuagga","CameraAccess","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","src","codeResult","code","setImport","offDetected","this","textImage","id","withIcon","withPreview","buttonText","label","imgExtension","maxFileSize","labelClass","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","quagga","_scan","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","width","showViewFinder","displayBarCode","map","i","switchReader","Navbar","height","facingMode","updateWindowDimensions","addEventListener","queryString","location","search","urlParams","URLSearchParams","get","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","filter","d","kind","videoDevices","match","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","Promise","all","capa","sort","b","max","innerHeight","handleScannerButton","bool","pathname","removeEventListener","Header","blob","alt","logo"],"mappings":"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","file":"static/js/10.62d390d1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Avis.css\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Header/Header\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport jwt from \"jsonwebtoken\";\n\nclass Avis extends React.Component {\n    state = {\n        value: \"\",\n        sent: 0,\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === true) {\n            localStorage.clear();\n            this.props.history.push(\"/login\");\n        }\n    };\n\n    setValue = (input) => {\n        this.setState({ value: input.target.value });\n    };\n\n    send = () => {\n        let userId = localStorage.getItem(\"userId\");\n        this.setState({ sent: 1 });\n        if (userId) {\n            fetch(\n                `https://api.lowympact.fr/api/v1/users/${userId}/review`,\n                // `http://localhost:8080/api/v1/users/${this.state.userId}/history`,\n                {\n                    method: \"put\",\n                    credentials: \"include\",\n                    headers: new Headers({\n                        Authorization: localStorage.getItem(\"token\"),\n                        \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                        \"Content-Type\": \"application/json\",\n                    }),\n                    body: JSON.stringify({\n                        message: this.state.value,\n                    }),\n                }\n            )\n                .then((response) => response.json())\n                .then((res) => {\n                    console.log(res);\n                    if (res.success) {\n                        this.setState({ sent: 2 });\n                    } else {\n                        this.setState({ sent: 3 });\n                    }\n                });\n        }\n    };\n\n    render = () => {\n        let button = <React.Fragment />;\n        if (this.state.sent == 0) {\n            button = <button onClick={this.send}>Envoyer ! </button>;\n        }\n        if (this.state.sent == 1) {\n            button = <div>Envoi en cours ...</div>;\n        }\n        if (this.state.sent == 2) {\n            button = <div> Message bien envoyé ! </div>;\n        }\n        if (this.state.sent == 3) {\n            button = <div>Erreur de réseau, merci de réessayer plus tard :/</div>;\n        }\n        return (\n            <div>\n                <Link to=\"/\">\n                    <Header />\n                </Link>\n\n                <Navbar />\n                <div className=\"avis-container\">\n                    <div className=\"avis\">\n                        <h2>Votre avis est important pour nous !</h2>\n                        <p>\n                            Cette application est le résultat d'un petit projet de 6 étudiants\n                            Lyonnais, et à besoin de nombreuses améliorations !\n                        </p>\n                        <p>\n                            Vos retours nous aident à nous améliorer, n'hésitez pas à nous écrire !{\" \"}\n                        </p>\n                        <textarea\n                            placeholder=\" Donnez-nous votre avis ! \"\n                            maxLength={500}\n                            value={this.state.value}\n                            onChange={this.setValue}\n                        ></textarea>\n                        {button}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Avis;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n        no_permission: false,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        this.QuaggaInit(this.props.capabilities);\n    };\n\n    QuaggaInit = (capabilities) => {\n        console.log(capabilities);\n        if (Object.keys(capabilities).length == 0) {\n            this.setState({ text: \"vide\" });\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    console.log(err);\n                    if (err == \"NotAllowedError: Permission denied\") {\n                        this.setState({ no_permission: true });\n                    }\n                    this.setState({ error: true, text: err + \" \" + JSON.stringify(capabilities) });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        console.log(Quagga.CameraAccess);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className=\"interactive-wrapper\">\n                    <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"} />\n                    {/* {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )} */}\n\n                    <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        <span className=\"material-icons green\">\n                            {!this.state.error ? \"upload_file\" : \"flip\"}\n                        </span>\n                    </button>\n\n                    {this.state.error ? (\n                        <div className=\"scan-error\">\n                            <ImageUploader\n                                withIcon={true}\n                                withPreview={false}\n                                buttonText={\n                                    <div className=\"button-import\">\n                                        <div className=\"material-icons\">add_a_photo</div>\n                                        <p>Importer une photo</p>\n                                    </div>\n                                }\n                                onChange={this.onDrop}\n                                label={\"\"}\n                                imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                                maxFileSize={5242880}\n                                labelClass={\"import-label\"}\n                            />\n                            <p className=\"red\">{textImage}</p>\n                            <p className=\"error-message-import\">\n                                {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                                {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                                {/* {\"code d'erreur : \" + this.state.text} */}\n                                {this.state.no_permission ? (\n                                    <div className=\"no-permission\">\n                                        L'accès à votre caméra est bloqué : Vous pouvez l'autoriser\n                                        dans les paramètres de votre navigateur pour accéder au\n                                        scanner\n                                    </div>\n                                ) : (\n                                    <React.Fragment />\n                                )}\n                                <br />\n                            </p>\n                        </div>\n                    ) : (\n                        <React.Fragment />\n                    )}\n                    {this.state.mutlipleTracks ? (\n                        <h1 className=\"debug\">If you see this, tell me</h1>\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"debug\">{this.state.text}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                            capabilities={this.props.capabilities}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n        capabilities: { facingMode: \"environment\" },\n    };\n\n    componentDidMount = async () => {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        try {\n            const queryString = window.location.search;\n            const urlParams = new URLSearchParams(queryString);\n            const camera = urlParams.get(\"camera\");\n            if (\n                navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                navigator.msGetUserMedia\n            ) {\n                // On vient récupérer les flux vidéo existants\n                let devices = await navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                        return devices.filter((d) => d.kind === \"videoinput\");\n                    });\n\n                //On prend seulement les caméras arrière\n                //(toutes les caméra si caméra arrière non existante)\n                let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n                if (videoDevices.length === 0) {\n                    videoDevices = devices;\n                }\n                console.log(videoDevices);\n                // Get all camera capabilities\n                let capabilities = videoDevices.map(async (device) => {\n                    return await navigator.mediaDevices\n                        .getUserMedia({\n                            video: { deviceId: { exact: device.deviceId } },\n                        })\n                        .then(\n                            (stream) => {\n                                let a = stream.getVideoTracks().map((track) => {\n                                    console.log(track);\n                                    if (track.getCapabilities) {\n                                        return track.getCapabilities();\n                                    } else {\n                                        return [{}];\n                                    }\n                                });\n                                stream.getTracks().forEach((track) => track.stop());\n                                if (a && a.length > 0) return a[0];\n                                else return {};\n                            },\n                            (err) => console.log(err)\n                        );\n                });\n                let capa = await Promise.all(capabilities);\n                if (capa && capa.length > 0) {\n                    //On trie les capabilities pour mettre les meilleurs résolutions en premier\n                    capa.sort((a, b) => {\n                        if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2)\n                            return -1;\n                        else return 1;\n                    });\n                }\n\n                if (capa[0]) {\n                    this.setState({ capabilities: capa[0] });\n                } else this.setState({ capabilities: { facingMode: \"environment\" } });\n            } else {\n                this.setState({ capabilities: { facingMode: \"environment\" } });\n            }\n        } catch (err) {\n            this.setState({ capabilities: { facingMode: \"environment\" } });\n        }\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan\n                    showScanner={this.handleScannerButton}\n                    history={this.props.history}\n                    capabilities={this.state.capabilities}\n                />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";"],"sourceRoot":""}