{"version":3,"sources":["pages/History.js","assets/images/logo.svg","assets/images/fruits-vegetables-basket-by-oblik-studio.svg","components/Header/Header.js","assets/images/bitmap.png","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["RenderHistoryItem","labelColor","item","label","pathProduct","barcode","bcProductId","name","className","to","src","image","alt","brand","style","color","indexOf","marginRight","History","props","componentDidMount","loadLocalStorageHistory","userId","localStorage","getItem","token","setState","loadHistoryInformations","fetch","method","credentials","headers","Headers","authorization","then","response","json","res","items","data","loading","setItem","JSON","stringify","history","parse","state","undefined","this","itemList","sort","a","b","Date","date","map","Object","keys","length","fruits","Component","Header","blob","Fragment","logo","ButtonHistory","ButtonProfil","ButtonScan","Scanner","error","usedCamera","devices","processingImage","text","switchCamera","num","Quagga","stop","QuaggaInit","deviceId","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","usedCameraId","mediaDevices","enumerateDevices","videoDevices","forEach","device","kind","push","match","maxResolution","i","video","exact","stream","getVideoTracks","track","capabilities","getCapabilities","height","max","getTracks","err","console","log","width","init","inputStream","type","constraints","focusMode","min","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","onDrop","reader","FileReader","readAsDataURL","onloadend","decodeSingle","codeResult","code","offDetected","textImage","id","onClick","withIcon","withPreview","buttonText","onChange","imgExtension","maxFileSize","labelClass","Scan","scanning","status","results","reading","quagga","_scan","showScanner","handleScan","arr","split","handleError","displayQrCode","delay","onError","onScan","showViewFinder","displayBarCode","switchReader","Navbar","updateWindowDimensions","innerHeight","handleScannerButton","bool","render","pathname","addEventListener","removeEventListener","React"],"mappings":"iOAQA,SAASA,EAAT,GAAsC,IAC9BC,EADqBC,EAAQ,EAARA,KAEN,MAAfA,EAAKC,OAAgC,MAAfD,EAAKC,MAC3BF,EAAa,MACS,MAAfC,EAAKC,MACZF,EAAa,SACS,MAAfC,EAAKC,OAAgC,MAAfD,EAAKC,QAClCF,EAAa,SAGjB,IAAIG,EAAc,aAAeF,EAAKG,QAWtC,OAVIH,EAAKI,cACLF,GAAe,IAAMF,EAAKI,aAE9BF,GAAe,WAGM,aAAjBF,EAAKG,UACLH,EAAKK,KAAO,gBAIZ,8BACI,eAAC,IAAD,CAAMC,UAAU,eAAeC,GAAIL,EAAnC,UACI,qBAAKI,UAAU,wBAAf,SACI,qBAAKE,IAAKR,EAAKS,MAAOC,IAAI,OAE9B,sBAAKJ,UAAU,yBAAf,UACI,qBAAKA,UAAU,eAAf,SAA+BN,EAAKK,OACpC,qBAAKC,UAAU,gBAAf,SAAgCN,EAAKW,WAEzC,sBAAKL,UAAU,0BAAf,UACI,qBAAKM,MAAO,CAAEC,MAAOd,GAArB,oBACA,qBAAKO,UAAU,gBAAf,UACuD,GAAlD,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKQ,QAAQd,EAAKC,OAAe,GAAKD,EAAKC,WAGzE,qBAAKW,MAAO,CAAEG,YAAa,OAAQF,MAAO,kBAA1C,SAA+D,W,IAMzEG,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,kBAAoB,WAChB,EAAKC,0BACL,IAAIC,EAASC,aAAaC,QAAQ,UAC9BC,EAAQF,aAAaC,QAAQ,SAC7BF,GAAUG,GACV,EAAKC,SAAS,CAAEJ,OAAQA,KAfb,EAoBnBK,wBAA0B,SAACL,GACvBM,MAAM,yCAAD,OACwCN,EADxC,YAID,CACIO,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjBC,cAAeV,aAAaC,QAAQ,SACpC,eAAgB,mBAChB,UAAW,2CAIlBU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGH,EAAKX,SAAS,CACVY,MAAK,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAKE,KACZC,SAAS,IAEbjB,aAAakB,QAAQ,gBAAiBC,KAAKC,UAAL,OAAeN,QAAf,IAAeA,OAAf,EAAeA,EAAKE,WA3CnD,EA+CnBlB,wBAA0B,WACtB,IAAIuB,EAAUF,KAAKG,MAAMtB,aAAaC,QAAQ,kBAM9C,GALA,EAAKE,SAAS,CACVY,MAAOM,EACPJ,SAAS,KAGRI,EAAS,CACV,IAAItB,EAASC,aAAaC,QAAQ,UAC9BC,EAAQF,aAAaC,QAAQ,SAC7BF,GAAUG,IACV,EAAKC,SAAS,CACVc,SAAS,IAEb,EAAKb,wBAAwBL,MA1DrC,EAAKwB,MAAQ,CACTR,WAAOS,EACPP,SAAS,EACTlB,YAAQyB,GANG,E,0CAkEnB,WACI,GAAIC,KAAKF,MAAMR,MAAO,CAClB,IAAIW,EAAW,cAAC,WAAD,IA0Bf,OAPIA,EAlBCD,KAAKR,QAmBF,qBAAKhC,UAAU,SAAf,SACI,qBAAKE,IAAI,4BAA4BE,IAAI,OAnBtCoC,KAAKF,MAAMR,MACjBY,MAAK,SAACC,EAAGC,GACN,OAAIC,KAAKR,MAAM,IAAIQ,KAAKF,EAAEG,OAASD,KAAKR,MAAM,IAAIQ,KAAKD,EAAEE,OAC9C,GAEC,KAIfC,KAAI,SAACrD,GACF,OACI,8BACI,cAACF,EAAD,CAAmBE,KAAMA,KADnBA,EAAKG,QAAUH,EAAKI,gBAaD,IAAzCkD,OAAOC,KAAKT,KAAKF,MAAMR,OAAOoB,OAE1B,gCACI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,qBAAKlD,UAAU,MAAf,SACI,gCACI,qBAAKE,IAAKiD,IAAQnD,UAAU,OAAOI,IAAI,WACvC,mBAAGJ,UAAU,YAAb,0DAOZ,gCACI,qBAAKA,UAAU,SAAf,SACI,qBAAKA,UAAU,eAAf,SAA+ByC,MAEnC,cAAC,IAAD,IACA,cAAC,IAAD,OAIZ,IAAItC,EACA,gCACI,qBAAKD,IAAKiD,IAAQnD,UAAU,OAAOI,IAAI,WACvC,mBAAGJ,UAAU,YAAb,qDAUR,OAPIwC,KAAKF,MAAMN,UACX7B,EACI,qBAAKH,UAAU,SAAf,SACI,qBAAKE,IAAI,4BAA4BE,IAAI,QAKjD,gCACI,cAAC,IAAD,IACA,cAAC,IAAD,IACA,qBAAKJ,UAAU,MAAf,SAAsBG,W,GAxIpBiD,aA+IP1C,a,gCClMA,QAA0B,kC,gCCA1B,QAA0B,sE,gCCAzC,iDA+Be2C,IA1Bf,SAAgB1C,GACZ,OACI,gCACI,8BACI,qBAAKT,IAAKoD,IAAMtD,UAAU,WAAWI,IAAI,WAE5CO,EAAMyB,QACH,cAAC,IAAMmB,SAAP,IAEA,eAAC,IAAMA,SAAP,WACI,8BACI,qBAAKrD,IAAKoD,IAAMtD,UAAU,YAAYI,IAAI,WAE9C,8BACI,qBAAKF,IAAKoD,IAAMtD,UAAU,aAAaI,IAAI,WACxC,OAGf,sBAAKJ,UAAU,mBAAf,UACI,qBAAKE,IAAKsD,IAAMxD,UAAU,cAAcI,IAAI,SAC5C,qD,gCCzBD,QAA0B,oC,2GCa1BqD,MAXf,WACI,OACI,gCACI,qBAAKzD,UAAU,cAAf,SACI,sBAAMA,UAAU,iBAAhB,uBAEJ,iDCGG0D,MAXf,WACI,OACI,gCACI,8BACI,sBAAM1D,UAAU,iBAAhB,sBAEJ,6CCMG2D,MAVf,WACI,OACI,8BACI,qBAAK3D,UAAU,mBAAf,SACI,sBAAMA,UAAU,iBAAhB,kC,mEC8RD4D,E,4MA/RXtB,MAAQ,CACJuB,OAAO,EACPC,WAAY,EACZC,QAAS,GACTC,gBAAiB,EACjBC,KAAM,G,EAGVC,aAAe,WACX,IAAIC,EAAM,EAAK7B,MAAMwB,WAAa,EAC9BK,GAAO,EAAK7B,MAAMyB,QAAQb,SAC1BiB,EAAM,GAEV,EAAKjD,SAAS,CAAE4C,WAAYK,IAC5BC,IAAOC,OACP,EAAKC,WAAW,EAAKhC,MAAMyB,QAAQI,GAAKI,W,EAG5C3D,kB,sBAAoB,8BAAA+B,EAAA,yDACV6B,EAAcC,OAAOC,SAASC,OAC9BC,EAAY,IAAIC,gBAAgBL,GAExB,SADCI,EAAUE,IAAI,UAHb,gBAKZ,EAAK5D,SAAS,CAAE2C,OAAO,EAAMI,KAAM,IALvB,4BAOZc,UAAUC,cACVD,UAAUE,oBACVF,UAAUG,iBACVH,UAAUI,gBAVE,0CAAAxC,EAAA,4CAAAA,EAAA,6DAYRyC,OAAe7C,EAZP,SAaUwC,UAAUM,aAC3BC,mBACA5D,MAAK,SAAUqC,GACZ,OAAOA,KAhBH,OAaNA,EAbM,OAkBRwB,EAAe,GACnBxB,EAAQyB,SAAQ,SAACC,GACO,eAAhBA,EAAOC,OACPH,EAAaI,KAAKF,GACdA,EAAO9F,MAAMiG,MAAM,YAM/B,EAAK1E,SAAS,CAAE6C,QAASwB,IAGrBM,GAAiB,EA/BT,IAAAlD,EAAA,iBAgCHmD,GAhCG,eAAAnD,EAAA,6DAiCF8C,EAASF,EAAaO,GAjCpB,SAoCFf,UAAUM,aACXL,aAAa,CACVe,MAAO,CAAExB,SAAU,CAAEyB,MAAOP,EAAOlB,aAEtC7C,MACG,SAACuE,GACGA,EAAOC,iBAAiBV,SAAQ,SAACW,GAC7B,IAAMC,EAAeD,EAAME,kBAGvBD,EAAaE,OAAOC,KAAOV,GACG,MAA9BJ,EAAO9F,MAAMiG,MAAM,UAEnBC,EAAgBO,EAAaE,OAAOC,IACpCnB,EAAeK,EAAOlB,SACtB,EAAKrD,SAAS,CAAE4C,WAAYgC,QAMpCG,EAAOO,YAAYhB,SAAQ,SAACW,GAAD,OAAWA,EAAM9B,aAEhD,SAACoC,GAAD,OAASC,QAAQC,IAAIF,MA3DrB,iDAAA9D,EAAA,KAgCE4C,GAhCF,sDAgCHO,EAhCG,6BAgCHA,GAhCG,yCA8DZ,EAAKxB,WAAWc,GA9DJ,oFAgEZ,EAAKlE,SAAS,CAAE2C,OAAO,EAAMI,KAAM,IAhEvB,4C,EAoEpBK,WAAa,SAACc,GAA+C,IAAjCwB,EAAgC,uDAAxB,KAAMN,EAAkB,uDAAT,KAC3C/B,EAAW,CAAEA,SAAUa,GACtBb,EAASA,WACVA,EAAW,IAEfH,IAAOyC,KACH,CACIC,YAAa,CACTC,KAAM,aACNC,YAAY,2BACLzC,GADI,IAEP0C,UAAW,aACXL,MAAO,CAAEM,IAAKN,GACdN,OAAQ,CAAEY,IAAKZ,MAOvBa,QAAS,CACLC,UAAW,SACXC,YAAY,GAEhBC,QAAQ,EACRC,KAAM,CACFC,IAAK,MACLC,MAAO,MACPC,KAAM,MACNC,OAAQ,OAEZC,aAAcnD,OAAOM,UAAU8C,qBAAuB,EACtDC,QAAS,CACLC,QAAS,CAAC,eAEdC,MAAO,CACHC,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,GAEjBC,UAAU,EACVC,eAAe,IAEnB,SAAC7B,GACG,GAAIA,EAQA,OANa,KAATG,GAA0B,KAAVN,EAChB,EAAKhC,WAAWc,EAAc,IAAK,KAGnC,EAAKlE,SAAS,CAAE2C,OAAO,EAAMI,KAAM,KAEhC,EAEXG,IAAOmE,WAGf,EAAK5H,MAAM6H,UAAUpE,KACrBA,IAAOqE,WAAW,EAAKC,c,EAO3BA,Y,uCAAc,WAAOC,GAAP,eAAAhG,EAAA,sEACO,EAAKhC,MAAM8H,WAAWE,GAD7B,OACNtE,EADM,OAEVqC,QAAQC,IAAItC,GACRA,GACAD,IAAOC,OAJD,2C,wDAQduE,OAAS,SAACzI,GACN,IACI,GAAkC,GAA9B,EAAKmC,MAAM0B,gBAAsB,CACjC,EAAK9C,SAAS,CAAE8C,gBAAiB,IACjC0C,QAAQC,IAAIxG,EAAMA,EAAM+C,OAAS,IACjC,IAAI2F,EAAS,IAAIC,WACjBD,EAAOE,cAAc5I,EAAMA,EAAM+C,OAAS,IAC1C2F,EAAOG,UAAY,WACf5E,IAAO6E,aACH,CACInB,QAAS,CACLC,QAAS,CAAC,eAEdT,QAAQ,EACRpH,IAAK2I,EAAOF,SAEhB,SAACA,GAEgB,IAAD,GADZjC,QAAQC,IAAIgC,GACRA,IACA,EAAKD,YAAYC,GACjB,EAAKzH,SAAS,CAAE8C,gBAAiB,IACjC0C,QAAQC,IAAI,SAAZ,UAAsBgC,EAAOO,kBAA7B,aAAsB,EAAmBC,QAEzCzC,QAAQC,IAAI,gBACZ,EAAKzF,SAAS,CAAE8C,gBAAiB,UAMvD,MAAOyC,GACLC,QAAQC,IAAIF,GACZ,EAAKvF,SAAS,CAAE8C,gBAAiB,M,0DA5CzC,WACII,IAAOgF,YAAY5G,KAAKkG,e,oBA+C5B,WAAU,IAAD,MACDW,EAAY,cAAC,IAAM9F,SAAP,IAkChB,OAhCkC,GAA9Bf,KAAKF,MAAM0B,kBACXqF,EACI,cAAC,IAAM9F,SAAP,UACI,0DAIsB,GAA9Bf,KAAKF,MAAM0B,kBACXqF,EACI,cAAC,IAAM9F,SAAP,UACI,sFAIsB,GAA9Bf,KAAKF,MAAM0B,kBACXqF,EACI,cAAC,IAAM9F,SAAP,UACI,+FAIsB,GAA9Bf,KAAKF,MAAM0B,kBACXqF,EACI,cAAC,IAAM9F,SAAP,UACI,8FAC8D,uBAD9D,oBAEqB,uBAFrB,+BASR,eAAC,IAAMA,SAAP,WACI,qBAAK+F,GAAG,cAActJ,UAAU,cAE/B,UAAAwC,KAAKF,MAAMyB,eAAX,eAAoBb,QAAS,EAC1B,yBAAQlD,UAAU,qBAAqBuJ,QAAS/G,KAAK0B,aAArD,UACI,sBAAMlE,UAAU,iBAAhB,0BACCwC,KAAKF,MAAMwB,cAGhB,cAAC,IAAMP,SAAP,IAEHf,KAAKF,MAAMuB,MACR,sBAAK7D,UAAU,aAAf,UACI,cAAC,IAAD,CACIwJ,UAAU,EACVC,aAAa,EACbC,WACI,sBAAK1J,UAAU,gBAAf,UACI,qBAAKA,UAAU,iBAAf,yBACA,qDAGR2J,SAAUnH,KAAKoG,OACfjJ,MAAO,GACPiK,aAAc,CAAC,OAAQ,OAAQ,OAAQ,SACvCC,YAAa,QACbC,WAAY,iBAEhB,mBAAG9J,UAAU,MAAb,SAAoBqJ,IACpB,oBAAGrJ,UAAU,uBAAb,UASK,mBAAqBwC,KAAKF,MAAM2B,KACjC,6BAIR,cAAC,IAAMV,SAAP,IAGA,mBAAGvD,UAAU,QAAb,UACK,UAAAwC,KAAKF,aAAL,mBAAYyB,QAAQvB,KAAKF,MAAMwB,mBAA/B,eAA4CS,UAAW,a,GAxR1DnB,a,gCCqMP2G,G,kNAjMXzH,MAAQ,CACJ0H,UAAU,EACVC,OAAQ,GACRC,QAAS,GACT9E,aAAc,mEACdrB,QAAS,GACToG,SAAS,EACTtK,aAAS0C,EACTzC,iBAAayC,EACb6B,YAAQ7B,G,EAGZiG,UAAY,SAAC4B,GACL,EAAK9H,MAAM8B,QACX,EAAK9B,MAAM8B,OAAOC,OAEtB,EAAKnD,SAAS,CAAEkD,OAAQgG,K,EAG5BC,MAAQ,WACJ,EAAKnJ,SAAS,CAAE8I,UAAW,EAAK1H,MAAM0H,SAAUC,OAAQ,M,EAG5DvB,Y,uCAAc,WAAO7G,GAAP,eAAAc,EAAA,0DACNd,EADM,qBAEFA,EAAIqH,aAAcrH,EAAIqH,WAAWC,KAF/B,wBAGF,EAAKjI,SAAS,CACVgJ,QAAS,CAACrI,GACVmI,UAAU,EACVC,OAAQ,YANV,SAQmB7I,MAAM,kDAAD,OAC4BS,EAAIqH,WAAWC,KAD3C,WARxB,cAQExH,EARF,gBAWiBA,EAASC,OAX1B,UAYoB,IAZpB,OAYSqI,OAZT,wBAaE,EAAK/I,SAAS,CACV8I,UAAU,EACVC,OAAQ,QACRpK,QAASgC,EAAIqH,WAAWC,OAE5B,EAAKxI,MAAM2J,aAAY,GACnB,EAAKhI,MAAM8B,QAAQ,EAAK9B,MAAM8B,OAAOC,OAnB3C,mBAoBS,GApBT,eAsBE,EAAKnD,SAAS,CACV8I,UAAU,EACVC,OAAQ,cAxBd,mBA0BS,GA1BT,4C,wDAgCdM,WAAa,SAACxI,GACV,GAAIA,EAAM,CACN,IAAIyI,EAAMzI,EAAK0I,MAAM,KACjBD,EAAItH,OAAS,GACb,EAAKhC,SAAS,CACV8I,UAAU,EACVnK,QAAS2K,EAAI,GACb1K,YAAa0K,EAAI,GACjBP,OAAQ,UAGZ,EAAK3H,MAAM8B,QAAQ,EAAK9B,MAAM8B,OAAOC,S,EAGjDqG,YAAc,SAACjE,GACXC,QAAQ7C,MAAM4C,I,EAGlBkE,cAAgB,WACZ,MAA0B,UAAtB,EAAKrI,MAAM2H,OAEP,cAAC,IAAD,CACIW,MAAO,IACPC,QAAS,EAAKH,YACdI,OAAQ,EAAKP,WACbjK,MAAO,CAAEsG,MAAO,QAChBmE,gBAAgB,IAIjB,cAAC,IAAMxH,SAAP,K,EAIfyH,eAAiB,WACb,MAA0B,UAAtB,EAAK1I,MAAM2H,OAEP,eAAC,IAAM1G,SAAP,WACI,qBAAKvD,UAAU,SAAf,SACI,oBAAIA,UAAU,UAAd,SACK,EAAKsC,MAAM4H,QAAQnH,KAAI,SAAC4F,EAAQ7C,GAAT,aACpB,gCAC2B,YAAtB,EAAKxD,MAAM2H,OACN,qCAA4BtB,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAQO,kBAApC,aAA4B,EAAoBC,MAChD,GACiB,cAAtB,EAAK7G,MAAM2H,OACN,4CACA,KANAtB,EAAOO,WAAWC,KAAOrD,UAW9C,EAAKxD,MAAM0H,SACR,cAAC,EAAD,CACIvB,WAAY,EAAKC,YACjBF,UAAW,EAAKA,UAChBpD,aAAc,EAAKA,eAEvB,QAIL,cAAC,IAAM7B,SAAP,K,EAIf0H,aAAe,WACP,EAAK3I,MAAM6H,QAAS,EAAKjJ,SAAS,CAAEiJ,SAAS,KAEzC,EAAK7H,MAAM8B,QAAQ,EAAK9B,MAAM8B,OAAOC,OACzC,EAAKnD,SAAS,CAAEiJ,SAAS,M,4CAIjC,WAAU,IAAD,OACL,OACI3H,KAAKF,MAAMzC,SACX2C,KAAKF,MAAMxC,cACV0C,KAAK7B,MAAMd,UAAY2C,KAAKF,MAAMzC,SAC/B2C,KAAK7B,MAAMb,cAAgB0C,KAAKF,MAAMxC,aAGtC,cAAC,IAAD,CAAUG,GAAI,aAAeuC,KAAKF,MAAMzC,QAAU,IAAM2C,KAAKF,MAAMxC,cAGvE0C,KAAKF,MAAMzC,SAAW2C,KAAK7B,MAAMd,UAAY2C,KAAKF,MAAMzC,QACjD,cAAC,IAAD,CAAUI,GAAI,aAAeuC,KAAKF,MAAMzC,UAG3C,sBAAKG,UAAU,wBAAf,UACI,sBACIA,UAAU,QACVuJ,QAAS,WACD,EAAKjH,MAAM8B,QAAQ,EAAK9B,MAAM8B,OAAOC,OAEzC,EAAK1D,MAAM2J,aAAY,IAL/B,kBAyCC9H,KAAKwI,wB,GA3LP5H,c,QCGb8H,E,4MACF5I,MAAQ,CACJgI,aAAa,EACbzK,aAAS0C,EACTzC,iBAAayC,EACb+D,OAAQ,G,EAYZ6E,uBAAyB,WACrB,EAAKjK,SAAS,CAAEoF,OAAQ7B,OAAO2G,e,EAGnCC,oBAAsB,SAACC,GACnB,EAAKpK,SAAS,CAAEoJ,YAAagB,K,EAuBjCC,OAAS,WACL,OAAI,EAAKjJ,MAAMgE,OAAS,IACb,cAAC,IAAM/C,SAAP,IAiBN,EAAKjB,MAAMgI,YAmER,aAhCA,CAgCC,EAAD,CAAMA,YAAa,EAAKe,oBAAqBjJ,QAAS,EAAKzB,MAAMyB,UAjEjE,cAAC,IAAMmB,SAAP,UACI,sBAAKvD,UAAU,mBAAf,UACI,cAAC,IAAD,CACIC,GAAG,WACHD,UACiC,aAA7ByE,OAAOC,SAAS8G,SACV,+CACA,gCALd,SAQI,cAAC,EAAD,MAEJ,qBAAKjC,QAAS,kBAAM,EAAK8B,qBAAoB,IAA7C,SACI,qBAAKrL,UAAU,gBAAf,SACI,cAAC,EAAD,QAGR,sBAAMA,UAAU,mBAAhB,kBACA,cAAC,IAAD,CACIC,GAAG,UACHD,UACiC,YAA7ByE,OAAOC,SAAS8G,SACV,gDACA,iCALd,SAQI,cAAC,EAAD,Y,uDApFxB,WACIhJ,KAAK2I,yBACL1G,OAAOgH,iBAAiB,SAAUjJ,KAAK2I,0B,kCAG3C,WACI1G,OAAOiH,oBAAoB,SAAUlJ,KAAK2I,4B,GAd7BQ,IAAMvI,WAyIZ8H,O","file":"static/js/14.5158f6dd.chunk.js","sourcesContent":["import { React, Component, Fragment } from \"react\";\nimport fruits from \"../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport Header from \"../components/Header/Header\";\nimport \"./History.css\";\n// import { ITEMS } from \"../assets/scanned/items\";\nimport { Link } from \"react-router-dom\";\n\nfunction RenderHistoryItem({ item }) {\n    var labelColor;\n    if (item.label === \"d\" || item.label === \"e\") {\n        labelColor = \"red\";\n    } else if (item.label === \"c\") {\n        labelColor = \"yellow\";\n    } else if (item.label === \"a\" || item.label === \"b\") {\n        labelColor = \"green\";\n    }\n\n    var pathProduct = \"/products/\" + item.barcode;\n    if (item.bcProductId) {\n        pathProduct += \"/\" + item.bcProductId;\n    }\n    pathProduct += \"?cart=no\";\n\n    // Mock Soutenance\n    if (item.barcode === \"80135463\") {\n        item.name = \"Nutella 200g\";\n    }\n\n    return (\n        <div>\n            <Link className=\"history-item\" to={pathProduct}>\n                <div className=\"history-img-container\">\n                    <img src={item.image} alt=\"\" />\n                </div>\n                <div className=\"history-name-container\">\n                    <div className=\"history-name\">{item.name}</div>\n                    <div className=\"history-brand\">{item.brand}</div>\n                </div>\n                <div className=\"history-label-container\">\n                    <div style={{ color: labelColor }}>●</div>\n                    <div className=\"history-label\">\n                        {[\"a\", \"b\", \"c\", \"d\", \"e\"].indexOf(item.label) == -1 ? \"\" : item.label}\n                    </div>\n                </div>\n                <div style={{ marginRight: \"10px\", color: \"rgb(41,72,102)\" }}>{\">\"}</div>\n            </Link>\n        </div>\n    );\n}\n\nclass History extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: undefined,\n            loading: true,\n            userId: undefined,\n        };\n    }\n\n    componentDidMount = () => {\n        this.loadLocalStorageHistory();\n        let userId = localStorage.getItem(\"userId\");\n        let token = localStorage.getItem(\"token\");\n        if (userId && token) {\n            this.setState({ userId: userId });\n            // this.loadHistoryInformations(userId);\n        }\n    };\n\n    loadHistoryInformations = (userId) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}/history`,\n            // `http://localhost:8080/api/v1/users/${userId}/history`,\n\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"Content-Type\": \"application/json\",\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n\n                this.setState({\n                    items: res?.data,\n                    loading: false,\n                });\n                localStorage.setItem(\"local_history\", JSON.stringify(res?.data));\n            });\n    };\n\n    loadLocalStorageHistory = () => {\n        let history = JSON.parse(localStorage.getItem(\"local_history\"));\n        this.setState({\n            items: history,\n            loading: false,\n        });\n\n        if (!history) {\n            let userId = localStorage.getItem(\"userId\");\n            let token = localStorage.getItem(\"token\");\n            if (userId && token) {\n                this.setState({\n                    loading: true,\n                });\n                this.loadHistoryInformations(userId);\n            }\n        }\n    };\n\n    render() {\n        if (this.state.items) {\n            let itemList = <Fragment />;\n            if (!this.loading) {\n                itemList = this.state.items\n                    .sort((a, b) => {\n                        if (Date.parse(new Date(a.date)) < Date.parse(new Date(b.date))) {\n                            return 1;\n                        } else {\n                            return -1;\n                        }\n                        // else return true;\n                    })\n                    .map((item) => {\n                        return (\n                            <div key={item.barcode + item.bcProductId}>\n                                <RenderHistoryItem item={item} />\n                            </div>\n                        );\n                    });\n            } else {\n                itemList = (\n                    <div className=\"loader\">\n                        <img src=\"/images/utils/loading.gif\" alt=\"\" />\n                    </div>\n                );\n            }\n\n            if (Object.keys(this.state.items).length === 0)\n                return (\n                    <div>\n                        <Header />\n                        <Navbar />\n                        <div className=\"App\">\n                            <div>\n                                <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                                <p className=\"logo-text\">Commence à scanner des produits !</p>\n                            </div>\n                        </div>\n                    </div>\n                );\n            else\n                return (\n                    <div>\n                        <div className=\"screen\">\n                            <div className=\"screen-title\">{itemList}</div>\n                        </div>\n                        <Header />\n                        <Navbar />\n                    </div>\n                );\n        } else {\n            let image = (\n                <div>\n                    <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                    <p className=\"logo-text\">Commence à scanner des produits !</p>\n                </div>\n            );\n            if (this.state.loading) {\n                image = (\n                    <div className=\"loader\">\n                        <img src=\"/images/utils/loading.gif\" alt=\"\" />\n                    </div>\n                );\n            }\n            return (\n                <div>\n                    <Header />\n                    <Navbar />\n                    <div className=\"App\">{image}</div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default History;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","export default __webpack_public_path__ + \"static/media/fruits-vegetables-basket-by-oblik-studio.7d5e1c64.svg\";","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const camera = urlParams.get(\"camera\");\n        if (camera == \"false\") {\n            this.setState({ error: true, text: 1 });\n        } else if (\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia\n        ) {\n            let usedCameraId = undefined;\n            const devices = await navigator.mediaDevices\n                .enumerateDevices()\n                .then(function (devices) {\n                    return devices;\n                });\n            let videoDevices = [];\n            devices.forEach((device) => {\n                if (device.kind === \"videoinput\") {\n                    videoDevices.push(device);\n                    if (device.label.match(/back/) != null) {\n                        //     ////console.log(\"Found video device: \" + JSON.stringify(device));\n                    }\n                }\n            });\n            // ALL  cameras\n            this.setState({ devices: videoDevices });\n\n            // open every video device and dump its characteristics\n            let maxResolution = -1;\n            for (let i in videoDevices) {\n                const device = videoDevices[i];\n                // //console.log(\"Opening video device \" + device.deviceId + \" (\" + device.label + \")\");\n\n                await navigator.mediaDevices\n                    .getUserMedia({\n                        video: { deviceId: { exact: device.deviceId } },\n                    })\n                    .then(\n                        (stream) => {\n                            stream.getVideoTracks().forEach((track) => {\n                                const capabilities = track.getCapabilities();\n\n                                if (\n                                    capabilities.height.max >= maxResolution &&\n                                    device.label.match(/back/) != null\n                                ) {\n                                    maxResolution = capabilities.height.max;\n                                    usedCameraId = device.deviceId;\n                                    this.setState({ usedCamera: i });\n                                }\n\n                                ////console.log(\"Track capabilities: \" + JSON.stringify(capabilities));\n                            });\n\n                            stream.getTracks().forEach((track) => track.stop());\n                        },\n                        (err) => console.log(err)\n                    );\n            }\n            this.QuaggaInit(usedCameraId);\n        } else {\n            this.setState({ error: true, text: 3 });\n        }\n    };\n\n    QuaggaInit = (usedCameraId, width = 1920, height = 1080) => {\n        let deviceId = { deviceId: usedCameraId };\n        if (!deviceId.deviceId) {\n            deviceId = {};\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...deviceId,\n                        focusMode: \"continuous\",\n                        width: { min: width },\n                        height: { min: height },\n                        // aspectRatio: {\n                        //     min: 1,\n                        //     max: 2,\n                        // },\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"30%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"30%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                debug: {\n                    drawBoundingBox: true,\n                    showFrequency: true,\n                    drawScanline: true,\n                    showPattern: true,\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    //console.log(err);\n                    if (width != 960 && height != 540) {\n                        this.QuaggaInit(usedCameraId, 960, 540);\n                        // console.log(\"here\");\n                    } else {\n                        this.setState({ error: true, text: 4 });\n                    }\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className=\"viewport\" />\n\n                {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        <ImageUploader\n                            withIcon={true}\n                            withPreview={false}\n                            buttonText={\n                                <div className=\"button-import\">\n                                    <div className=\"material-icons\">add_a_photo</div>\n                                    <p>Prendre une photo</p>\n                                </div>\n                            }\n                            onChange={this.onDrop}\n                            label={\"\"}\n                            imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                            maxFileSize={5242880}\n                            labelClass={\"import-label\"}\n                        />\n                        <p className=\"red\">{textImage}</p>\n                        <p className=\"error-message-import\">\n                            {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                            {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                            {\"code d'erreur : \" + this.state.text}\n                            <br />\n                        </p>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n                {\n                    <p className=\"debug\">\n                        {this.state?.devices[this.state.usedCamera]?.deviceId + \"-\"}\n                    </p>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n"],"sourceRoot":""}