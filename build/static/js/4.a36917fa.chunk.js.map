{"version":3,"sources":["assets/images/logo.svg","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js","components/Header/Header.js","assets/images/bitmap.png"],"names":["ButtonHistory","className","ButtonProfil","ButtonScan","Scanner","state","error","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","no_permission","switchCamera","num","length","setState","Quagga","stop","QuaggaInit","deviceId","componentDidMount","a","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","then","filter","d","kind","videoDevices","label","match","console","log","capabilities","map","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","err","Promise","all","capa","sort","b","width","max","height","facingMode","Object","keys","init","inputStream","type","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","multiple","singleChannel","JSON","stringify","start","props","setQuagga","CameraAccess","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","src","codeResult","code","setImport","offDetected","this","textImage","Fragment","id","onClick","withIcon","withPreview","buttonText","onChange","imgExtension","maxFileSize","labelClass","Component","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","quagga","_scan","res","fetch","response","json","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","showViewFinder","displayBarCode","i","switchReader","to","Navbar","updateWindowDimensions","innerHeight","handleScannerButton","bool","render","history","pathname","addEventListener","removeEventListener","React","Header","blob","alt","logo"],"mappings":"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","file":"static/js/4.a36917fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n        no_permission: false,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        try {\n            const queryString = window.location.search;\n            const urlParams = new URLSearchParams(queryString);\n            const camera = urlParams.get(\"camera\");\n            if (camera == \"false\") {\n                this.setState({ error: true, text: 1 });\n            } else if (\n                navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                navigator.msGetUserMedia\n            ) {\n                // On vient récupérer les flux vidéo existants\n                let devices = await navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                        return devices.filter((d) => d.kind === \"videoinput\");\n                    });\n                this.setState({ devices: devices });\n\n                //On prend seulement les caméras arrière\n                //(toutes les caméra si caméra arrière non existante)\n                let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n                if (videoDevices.length === 0) {\n                    this.setState({ noBackCamera: true });\n                    videoDevices = devices;\n                }\n                console.log(videoDevices);\n                // Get all camera capabilities\n                let capabilities = videoDevices.map(async (device) => {\n                    return await navigator.mediaDevices\n                        .getUserMedia({\n                            video: { deviceId: { exact: device.deviceId } },\n                        })\n                        .then(\n                            (stream) => {\n                                let a = stream.getVideoTracks().map((track) => {\n                                    console.log(track);\n                                    if (track.getCapabilities) {\n                                        return track.getCapabilities();\n                                    } else {\n                                        return [{}];\n                                    }\n                                });\n                                stream.getTracks().forEach((track) => track.stop());\n                                if (a.length > 1) this.setState({ mutlipleTracks: true });\n                                if (a && a.length > 0) return a[0];\n                                else return {};\n                            },\n                            (err) => console.log(err)\n                        );\n                });\n                let capa = await Promise.all(capabilities);\n                if (capa && capa.length > 0) {\n                    //On trie les capabilities pour mettre les meilleurs résolutions en premier\n                    capa.sort((a, b) => {\n                        if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2)\n                            return -1;\n                        else return 1;\n                    });\n                }\n\n                if (capa[0]) {\n                    this.QuaggaInit(capa[0]);\n                } else this.QuaggaInit({ facingMode: \"environment\" });\n            } else {\n                this.setState({ error: true, text: 3 });\n            }\n        } catch (err) {\n            this.QuaggaInit({ facingMode: \"environment\" });\n        }\n    };\n\n    QuaggaInit = (capabilities) => {\n        console.log(capabilities);\n        if (Object.keys(capabilities).length == 0) {\n            this.setState({ text: \"vide\" });\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    console.log(err);\n                    if (err == \"NotAllowedError: Permission denied\") {\n                        this.setState({ no_permission: true });\n                    }\n                    this.setState({ error: true, text: err + \" \" + JSON.stringify(capabilities) });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        console.log(Quagga.CameraAccess);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className=\"interactive-wrapper\">\n                    <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"} />\n                    {/* {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )} */}\n\n                    <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        <span className=\"material-icons green\">cameraswitch</span>\n                    </button>\n\n                    {this.state.error ? (\n                        <div className=\"scan-error\">\n                            <ImageUploader\n                                withIcon={true}\n                                withPreview={false}\n                                buttonText={\n                                    <div className=\"button-import\">\n                                        <div className=\"material-icons\">add_a_photo</div>\n                                        <p>Prendre une photo</p>\n                                    </div>\n                                }\n                                onChange={this.onDrop}\n                                label={\"\"}\n                                imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                                maxFileSize={5242880}\n                                labelClass={\"import-label\"}\n                            />\n                            <p className=\"red\">{textImage}</p>\n                            <p className=\"error-message-import\">\n                                {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                                {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                                {/* {\"code d'erreur : \" + this.state.text} */}\n                                {this.state.no_permission ? (\n                                    <div className=\"no-permission\">\n                                        L'accès à votre caméra est bloqué : Vous pouvez l'autoriser\n                                        dans les paramètres de votre navigateur pour accéder au\n                                        scanner\n                                    </div>\n                                ) : (\n                                    <React.Fragment />\n                                )}\n                                <br />\n                            </p>\n                        </div>\n                    ) : (\n                        <React.Fragment />\n                    )}\n                    {this.state.mutlipleTracks ? (\n                        <h1 className=\"debug\">If you see this, tell me</h1>\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"debug\">{this.state.text}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";"],"sourceRoot":""}