{"version":3,"sources":["components/Charts/DoughnutChartEcoScore.js","components/Charts/BarChartCarbonImpact.js","pages/Statistics.js"],"names":["DoughnutChartEcoScore","state","swiper","undefined","selectedSegment","displayChart","chart","Fragment","props","ecoScoreData","cartedProduct","data","title","value","a","color","b","c","d","e","unknown","lineWidth","paddingAngle","radius","PieChart","defaultProps","animate","animationDuration","label","dataEntry","Math","round","percentage","labelStyle","index","fontSize","fontFamily","fill","labelPosition","segmentsStyle","transition","cursor","segmentsShift","onClick","event","setState","slideTo","motion","div","className","initial","opacity","exit","src","fruits","alt","onSlideChange","displaySlides","slides","render","spaceBetween","slidesPerView","centeredSlides","i","activeIndex","onSwiper","React","Component","monthNames","BarChartCarbonImpact","options","toolbar","show","dropShadow","enabled","top","left","blur","plotOptions","bar","borderRadius","horizontal","xaxis","categories","labels","style","fontColor","text","yaxis","dataLabels","noData","colors","grid","lines","carbonImpactData","now","dataSize","length","unit","Date","setHours","setDate","getDate","getDay","yearStart","getFullYear","ceil","push","getMonth","year","monthNum","toString","series","name","sortedData","sort","offset","finalValue","impact","toFixed","nbProducts","type","height","Statistics","username","scannedProduct","userId","Verify","isExpired","token","localStorage","getItem","decodedToken","jwt","decode","complete","dateNow","payload","exp","getTime","connected","componentDidMount","loadUserData","loadEcoScoreData","loadCarbonImpactData","fetch","method","credentials","headers","Headers","authorization","then","response","json","res","typeAggregate","statistics","ecoscore","carbonImpact","displayStats","handleChange","newValue","displayNavbar","to","Navbar"],"mappings":"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","file":"static/js/7.ca619d74.chunk.js","sourcesContent":["import React from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n// Import Swiper styles\nimport \"swiper/swiper-bundle.css\";\n\n//Import Pie Chart\nimport { PieChart } from \"react-minimal-pie-chart\";\n\nimport fruits from \"../../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\nimport { motion } from \"framer-motion\";\n\nclass DoughnutChartEcoScore extends React.Component {\n    state = {\n        swiper: undefined,\n        selectedSegment: undefined,\n    };\n\n    displayChart = () => {\n        let chart = <React.Fragment></React.Fragment>;\n        if (this.props.ecoScoreData && this.props.cartedProduct > 0) {\n            let data = [\n                {\n                    title: \"EcoScore A\",\n                    value: this.props.ecoScoreData.a,\n                    color: \"#1e8f4f\",\n                },\n                {\n                    title: \"EcoScore B\",\n                    value: this.props.ecoScoreData.b,\n                    color: \"#5fad0c\",\n                },\n                {\n                    title: \"EcoScore C\",\n                    value: this.props.ecoScoreData.c,\n                    color: \"#ecb10f\",\n                },\n                {\n                    title: \"EcoScore D\",\n                    value: this.props.ecoScoreData.d,\n                    color: \"#ff6f1e\",\n                },\n                {\n                    title: \"EcoScore E\",\n                    value: this.props.ecoScoreData.e,\n                    color: \"#df1e1f\",\n                },\n                {\n                    title: \"EcoScore Inconnu\",\n                    value: this.props.ecoScoreData.unknown,\n                    color: \"#000000\",\n                },\n            ];\n            chart = (\n                <PieChart\n                    data={data}\n                    lineWidth={30}\n                    paddingAngle={1}\n                    radius={PieChart.defaultProps.radius - 3}\n                    animate\n                    animationDuration={700}\n                    label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\n                    labelStyle={(index) =>\n                        index == this.state.selectedSegment\n                            ? {\n                                  fontSize: \"6px\",\n                                  fontFamily: \"comfortaa\",\n                                  fill: data[index].color,\n                              }\n                            : {\n                                  fontSize: \"0px\",\n                                  fontFamily: \"comfortaa\",\n                                  fill: data[index].color,\n                              }\n                    }\n                    labelPosition={60}\n                    segmentsStyle={{\n                        transition: \"stroke .3s ease-out\",\n                        cursor: \"pointer\",\n                    }}\n                    segmentsShift={(index) => (index == this.state.selectedSegment ? 3 : 0)}\n                    onClick={(event, index) => {\n                        if (index == this.state.selectedSegment) {\n                            this.setState({ selectedSegment: undefined });\n                            this.state.swiper.slideTo(0, 500);\n                        } else {\n                            this.setState({ selectedSegment: index });\n                            this.state.swiper.slideTo(index + 1, 500);\n                        }\n                    }}\n                />\n            );\n        } else {\n            chart = (\n                <motion.div\n                    className=\"stats-no-product\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                >\n                    <div>\n                        <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                        <p className=\"logo-text\">Commence à scanner des produits !</p>\n                    </div>\n                </motion.div>\n            );\n        }\n        return chart;\n    };\n\n    onSlideChange = (index) => {\n        if (index == 0) {\n            this.setState({ selectedSegment: undefined });\n        } else {\n            this.setState({ selectedSegment: index - 1 });\n        }\n    };\n\n    displaySlides = () => {\n        let slides = <React.Fragment></React.Fragment>;\n        if (this.props.ecoScoreData && this.props.cartedProduct > 0) {\n            slides = (\n                <React.Fragment>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <img\n                                className=\"stats-ecoscore-full\"\n                                src=\"/images/utils/ecoScoreFull.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore A : {this.props.ecoScoreData.a}{\" \"}\n                                {this.props.ecoScoreData.a > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreA.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore B : {this.props.ecoScoreData.b}{\" \"}\n                                {this.props.ecoScoreData.b > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreB.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore C : {this.props.ecoScoreData.c}{\" \"}\n                                {this.props.ecoScoreData.c > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreC.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore D : {this.props.ecoScoreData.d}{\" \"}\n                                {this.props.ecoScoreData.d > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreD.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore E : {this.props.ecoScoreData.e}{\" \"}\n                                {this.props.ecoScoreData.e > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                            <img\n                                className=\"stats-ecoscore-image\"\n                                src=\"/images/utils/ecoScoreE.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} EcoScore Inconnu : {this.props.ecoScoreData.unknown}{\" \"}\n                                {this.props.ecoScoreData.unknown > 1 ? \" produits\" : \" produit\"}\n                            </span>\n                        </div>\n                    </SwiperSlide>\n                </React.Fragment>\n            );\n        }\n        return slides;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                <div className=\"stats-chart-pie\">{this.displayChart()}</div>\n                <div className=\"stats-chart-slider\">\n                    <Swiper\n                        spaceBetween={0}\n                        slidesPerView={1}\n                        centeredSlides={true}\n                        onSlideChange={(i) => this.onSlideChange(i.activeIndex)}\n                        onSwiper={(swiper) => this.setState({ swiper: swiper })}\n                    >\n                        {this.displaySlides()}\n                    </Swiper>\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default DoughnutChartEcoScore;\n","import React from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n// Import Swiper styles\nimport \"swiper/swiper-bundle.css\";\n\n//Import Bar Chart\nimport Chart from \"react-apexcharts\";\n\nimport fruits from \"../../assets/images/fruits-vegetables-basket-by-oblik-studio.svg\";\nimport { motion } from \"framer-motion\";\n\nconst monthNames = [\n    \"Janvier\",\n    \"Février\",\n    \"Mars\",\n    \"Avril\",\n    \"Mai\",\n    \"Juin\",\n    \"Juillet\",\n    \"Août\",\n    \"Septembre\",\n    \"Octobre\",\n    \"Novembre\",\n    \"Décembre\",\n];\n\nclass BarChartCarbonImpact extends React.Component {\n    state = {\n        selectedSegment: 0,\n        options: {\n            chart: {\n                toolbar: {\n                    show: false,\n                },\n                dropShadow: {\n                    enabled: true,\n                    top: 0,\n                    left: 0,\n                    blur: 2,\n                    opacity: 0.5,\n                },\n            },\n            plotOptions: {\n                bar: {\n                    borderRadius: 5,\n                    horizontal: true,\n                },\n            },\n            xaxis: {\n                categories: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\"],\n                labels: {\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n                title: {\n                    text: \"CO₂ équivalent (kg)\",\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n            },\n            yaxis: {\n                labels: {\n                    style: {\n                        fontSize: \"12px\",\n                        fontFamily: \"Comfortaa\",\n                        fontColor: \"#1b3044\",\n                    },\n                },\n            },\n            dataLabels: {\n                enabled: true,\n                style: {\n                    fontSize: \"10px\",\n                    fontFamily: \"Comfortaa\",\n                },\n            },\n            noData: {\n                text: \"Chargement...\",\n            },\n            fill: {\n                colors: [\"#ff914d\"],\n            },\n            grid: {\n                xaxis: {\n                    lines: {\n                        show: true,\n                    },\n                },\n                yaxis: {\n                    lines: {\n                        show: false,\n                    },\n                },\n            },\n        },\n    };\n\n    displayChart = () => {\n        let chart = <React.Fragment></React.Fragment>;\n        if (this.props.carbonImpactData && this.props.cartedProduct > 0) {\n            let dataSize = this.props.carbonImpactData.data.length;\n            let xaxis = [];\n            let now;\n\n            switch (this.props.carbonImpactData.unit) {\n                case \"weekly\":\n                    let d = new Date();\n                    d.setHours(0, 0, 0, 0);\n                    d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n                    let yearStart = new Date(d.getFullYear(), 0, 1);\n                    now = Math.ceil(((d - yearStart) / 86400000 + 1) / 7);\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push(\"Semaine \" + (now - i));\n                    }\n                    break;\n                case \"monthly\":\n                    now = new Date().getMonth();\n                    let year = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        let monthNum = now - i;\n                        if (monthNum < 0) {\n                            xaxis.push(monthNames[monthNum + 12] + \" \" + (year - 1));\n                        } else {\n                            xaxis.push(monthNames[monthNum] + \" \" + year);\n                        }\n                    }\n                    break;\n                case \"yearly\":\n                    now = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push((now - i).toString());\n                    }\n                    break;\n                default:\n                    now = new Date().getFullYear();\n                    for (let i = dataSize - 1; i >= 0; i--) {\n                        xaxis.push((now - i).toString());\n                    }\n                    break;\n            }\n            this.state.options.xaxis.categories = xaxis;\n\n            let series = [\n                {\n                    name: \"CO₂ équivalent (kg)\",\n                    data: [],\n                },\n            ];\n\n            let sortedData = this.props.carbonImpactData.data;\n            sortedData.sort((a, b) => (a.offset > b.offset ? 1 : -1));\n\n            for (let i = 0; i < sortedData.length; i++) {\n                let finalValue =\n                    this.state.selectedSegment === 0\n                        ? sortedData[i].impact.toFixed(2)\n                        : (sortedData[i].impact / sortedData[i].nbProducts).toFixed(2);\n                series[0].data.push(finalValue);\n            }\n\n            chart = (\n                <React.Fragment>\n                    <div className=\"stats-chart-bar\">\n                        <Chart\n                            options={this.state.options}\n                            series={series}\n                            type=\"bar\"\n                            height={350}\n                        ></Chart>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            chart = (\n                <motion.div\n                    className=\"stats-no-product\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                >\n                    <div>\n                        <img src={fruits} className=\"logo\" alt=\"Fruits\" />\n                        <p className=\"logo-text\">Commence à scanner des produits !</p>\n                    </div>\n                </motion.div>\n            );\n        }\n        return chart;\n    };\n\n    onSlideChange = (index) => {\n        this.setState({ selectedSegment: this.state.selectedSegment === 0 ? 1 : 0 });\n    };\n\n    displaySlides = () => {\n        let slides = <React.Fragment></React.Fragment>;\n        if (this.props.carbonImpactData && this.props.cartedProduct > 0) {\n            slides = (\n                <React.Fragment>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">{\">\"} Impact Carbone total</span>\n                        </div>\n                    </SwiperSlide>\n                    <SwiperSlide>\n                        <div className=\"stats-slider\">\n                            <span className=\"stats-slider-text\">\n                                {\">\"} Impact Carbone par produit\n                            </span>\n                        </div>\n                    </SwiperSlide>\n                </React.Fragment>\n            );\n        }\n        return slides;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                {this.displayChart()}\n                <div className=\"stats-chart-slider\">\n                    <Swiper\n                        spaceBetween={0}\n                        slidesPerView={1}\n                        centeredSlides={true}\n                        onSlideChange={(i) => this.onSlideChange(i.activeIndex)}\n                        onSwiper={(swiper) => this.setState({ swiper: swiper })}\n                    >\n                        {this.displaySlides()}\n                    </Swiper>\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default BarChartCarbonImpact;\n","import React from \"react\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport DoughnutChartEcoScore from \"../components/Charts/DoughnutChartEcoScore\";\nimport BarChartCarbonImpact from \"../components/Charts/BarChartCarbonImpact\";\nimport \"./Product.css\";\nimport { Link } from \"react-router-dom\";\nimport jwt from \"jsonwebtoken\";\n\nclass Statistics extends React.Component {\n    state = {\n        ecoScoreData: undefined,\n        carbonImpactData: undefined,\n        username: undefined,\n        scannedProduct: undefined,\n        cartedProduct: undefined,\n        userId: undefined,\n        value: 0,\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === false) {\n            this.setState({ connected: true });\n        }\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n        let userId = localStorage.getItem(\"userId\");\n        if (userId) {\n            this.setState({ userId: userId });\n        }\n        this.loadUserData(userId);\n        this.loadEcoScoreData(userId, \"fromBeginning\");\n        this.loadCarbonImpactData(userId, \"fromBeginning\");\n    };\n\n    loadUserData = (userId) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}`,\n            // `http://localhost:8080/api/v1/users/${userId}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    username: res?.data?.username,\n                    scannedProduct: res?.scannedProduct,\n                    cartedProduct: res?.cartedProduct,\n                });\n            });\n    };\n\n    loadEcoScoreData = (userId, typeAggregate) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}/statistics?typeStatistic=ecoscore&typeAggregate=${typeAggregate}`,\n            // `http://localhost:8080/api/v1/users/${userId}/statistics?typeStatistic=ecoscore&typeAggregate=${typeAggregate}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    ecoScoreData: res?.statistics?.ecoscore,\n                });\n            });\n    };\n\n    loadCarbonImpactData = (userId, typeAggregate) => {\n        fetch(\n            `https://api.lowympact.fr/api/v1/users/${userId}/statistics?typeStatistic=carbonImpact&typeAggregate=${typeAggregate}`,\n            // `http://localhost:8080/api/v1/users/${userId}/statistics?typeStatistic=carbonImpact&typeAggregate=${typeAggregate}`,\n            {\n                method: \"get\",\n                credentials: \"include\",\n                headers: new Headers({\n                    authorization: localStorage.getItem(\"token\"),\n                    \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                    \"Content-Type\": \"application/json\",\n                }),\n            }\n        )\n            .then((response) => response.json())\n            .then((res) => {\n                //console.log(res);\n                this.setState({\n                    carbonImpactData: res?.statistics?.carbonImpact,\n                });\n            });\n    };\n\n    displayStats = () => {\n        let scannedProduct = <React.Fragment />;\n        let cartedProduct = <React.Fragment />;\n\n        if (this.state.scannedProduct !== undefined) {\n            scannedProduct = (\n                <div className=\"stats-header-text\">\n                    <span className={\"circle-stats color_score_stats\"}>⬤ </span>\n                    {this.state.scannedProduct > 1 ? \"Produits scannés :\" : \"Produit scanné :\"}\n                    <span className=\"uppercase \"> {this.state.scannedProduct}</span>\n                </div>\n            );\n        }\n\n        if (this.state.cartedProduct !== undefined) {\n            cartedProduct = (\n                <div className=\"stats-header-text\">\n                    <span className={\"circle-stats color_score_stats\"}>⬤ </span>\n                    {this.state.cartedProduct > 1 ? \"Produits achetés :\" : \"Produit acheté :\"}\n                    <span className=\"uppercase \"> {this.state.cartedProduct}</span>\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {scannedProduct}\n                {cartedProduct}\n            </React.Fragment>\n        );\n    };\n\n    handleChange = (event, newValue) => {\n        this.setState({ value: newValue });\n    };\n\n    displayNavbar = () => {\n        let retour = (\n            <div className=\"stats-navbar-container\">\n                <button\n                    className={\n                        this.state.value === 0\n                            ? \"stats-navbar-button selected\"\n                            : \"stats-navbar-button\"\n                    }\n                    onClick={() => this.handleChange(\"\", 0)}\n                >\n                    EcoScore\n                </button>\n                <button\n                    className={\n                        this.state.value === 1\n                            ? \"stats-navbar-button selected\"\n                            : \"stats-navbar-button\"\n                    }\n                    onClick={() => this.handleChange(\"\", 1)}\n                >\n                    Impact Carbone\n                </button>\n                <div\n                    className={\n                        this.state.value === 0 ? \"navbar-under nav-left\" : \"navbar-under nav-right\"\n                    }\n                ></div>\n            </div>\n        );\n        return retour;\n    };\n\n    render = () => {\n        return (\n            <React.Fragment>\n                <div className=\"stats-page-container\">\n                    <div className=\"stats-header-container\">\n                        <div className=\"stats-profil-link\">\n                            <Link to=\"/profil\"> {\"<\"} Profil</Link>\n                        </div>\n                        <img className=\"stats-bitmap-image\" src=\"/images/utils/bitmap.png\" alt=\"\" />\n                    </div>\n\n                    <div className=\"stats-welcome\">\n                        <span className=\"stats-welcome-text\">\n                            {this.state.username\n                                ? this.state.username + \", voici ton récapitulatif Lowympact...\"\n                                : \"\"}\n                        </span>\n                    </div>\n\n                    <div className=\"stats-text-container\">{this.displayStats()}</div>\n\n                    {this.displayNavbar()}\n\n                    {this.state.value === 0 ? (\n                        <DoughnutChartEcoScore\n                            ecoScoreData={this.state.ecoScoreData}\n                            scannedProduct={this.state.scannedProduct}\n                            cartedProduct={this.state.cartedProduct}\n                        ></DoughnutChartEcoScore>\n                    ) : (\n                        <BarChartCarbonImpact\n                            carbonImpactData={this.state.carbonImpactData}\n                            scannedProduct={this.state.scannedProduct}\n                            cartedProduct={this.state.cartedProduct}\n                        ></BarChartCarbonImpact>\n                    )}\n\n                    <Navbar />\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default Statistics;\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n"],"sourceRoot":""}