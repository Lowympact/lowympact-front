{"version":3,"sources":["assets/images/logo.svg","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js","components/Header/Header.js","assets/images/bitmap.png"],"names":["ButtonHistory","className","ButtonProfil","ButtonScan","Scanner","state","error","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","no_permission","switchCamera","num","length","setState","Quagga","stop","QuaggaInit","deviceId","componentDidMount","a","props","capabilities","console","log","Object","keys","init","inputStream","type","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","window","navigator","hardwareConcurrency","decoder","readers","multiple","singleChannel","err","JSON","stringify","start","setQuagga","CameraAccess","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","src","codeResult","code","setImport","offDetected","this","textImage","Fragment","id","onClick","withIcon","withPreview","buttonText","onChange","label","imgExtension","maxFileSize","labelClass","Component","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","quagga","_scan","res","fetch","response","json","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","width","showViewFinder","displayBarCode","map","i","switchReader","to","Navbar","height","facingMode","updateWindowDimensions","addEventListener","queryString","location","search","urlParams","URLSearchParams","get","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","then","filter","d","kind","videoDevices","match","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","Promise","all","capa","sort","b","max","innerHeight","handleScannerButton","bool","render","history","pathname","removeEventListener","React","Header","blob","alt","logo"],"mappings":"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","file":"static/js/4.7983f163.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n        no_permission: false,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        this.QuaggaInit(this.props.capabilities);\n    };\n\n    QuaggaInit = (capabilities) => {\n        console.log(capabilities);\n        if (Object.keys(capabilities).length == 0) {\n            this.setState({ text: \"vide\" });\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    console.log(err);\n                    if (err == \"NotAllowedError: Permission denied\") {\n                        this.setState({ no_permission: true });\n                    }\n                    this.setState({ error: true, text: err + \" \" + JSON.stringify(capabilities) });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        console.log(Quagga.CameraAccess);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className=\"interactive-wrapper\">\n                    <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"} />\n                    {/* {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )} */}\n\n                    <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        <span className=\"material-icons green\">\n                            {!this.state.error ? \"upload_file\" : \"flip\"}\n                        </span>\n                    </button>\n\n                    {this.state.error ? (\n                        <div className=\"scan-error\">\n                            <ImageUploader\n                                withIcon={true}\n                                withPreview={false}\n                                buttonText={\n                                    <div className=\"button-import\">\n                                        <div className=\"material-icons\">add_a_photo</div>\n                                        <p>Importer une photo</p>\n                                    </div>\n                                }\n                                onChange={this.onDrop}\n                                label={\"\"}\n                                imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                                maxFileSize={5242880}\n                                labelClass={\"import-label\"}\n                            />\n                            <p className=\"red\">{textImage}</p>\n                            <p className=\"error-message-import\">\n                                {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                                {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                                {/* {\"code d'erreur : \" + this.state.text} */}\n                                {this.state.no_permission ? (\n                                    <div className=\"no-permission\">\n                                        L'accès à votre caméra est bloqué : Vous pouvez l'autoriser\n                                        dans les paramètres de votre navigateur pour accéder au\n                                        scanner\n                                    </div>\n                                ) : (\n                                    <React.Fragment />\n                                )}\n                                <br />\n                            </p>\n                        </div>\n                    ) : (\n                        <React.Fragment />\n                    )}\n                    {this.state.mutlipleTracks ? (\n                        <h1 className=\"debug\">If you see this, tell me</h1>\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"debug\">{this.state.text}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                            capabilities={this.props.capabilities}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n        capabilities: { facingMode: \"environment\" },\n    };\n\n    componentDidMount = async () => {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        try {\n            const queryString = window.location.search;\n            const urlParams = new URLSearchParams(queryString);\n            const camera = urlParams.get(\"camera\");\n            if (\n                navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                navigator.msGetUserMedia\n            ) {\n                // On vient récupérer les flux vidéo existants\n                let devices = await navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                        return devices.filter((d) => d.kind === \"videoinput\");\n                    });\n\n                //On prend seulement les caméras arrière\n                //(toutes les caméra si caméra arrière non existante)\n                let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n                if (videoDevices.length === 0) {\n                    videoDevices = devices;\n                }\n                console.log(videoDevices);\n                // Get all camera capabilities\n                let capabilities = videoDevices.map(async (device) => {\n                    return await navigator.mediaDevices\n                        .getUserMedia({\n                            video: { deviceId: { exact: device.deviceId } },\n                        })\n                        .then(\n                            (stream) => {\n                                let a = stream.getVideoTracks().map((track) => {\n                                    console.log(track);\n                                    if (track.getCapabilities) {\n                                        return track.getCapabilities();\n                                    } else {\n                                        return [{}];\n                                    }\n                                });\n                                stream.getTracks().forEach((track) => track.stop());\n                                if (a && a.length > 0) return a[0];\n                                else return {};\n                            },\n                            (err) => console.log(err)\n                        );\n                });\n                let capa = await Promise.all(capabilities);\n                if (capa && capa.length > 0) {\n                    //On trie les capabilities pour mettre les meilleurs résolutions en premier\n                    capa.sort((a, b) => {\n                        if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2)\n                            return -1;\n                        else return 1;\n                    });\n                }\n\n                if (capa[0]) {\n                    this.setState({ capabilities: capa[0] });\n                } else this.setState({ capabilities: { facingMode: \"environment\" } });\n            } else {\n                this.setState({ capabilities: { facingMode: \"environment\" } });\n            }\n        } catch (err) {\n            this.setState({ capabilities: { facingMode: \"environment\" } });\n        }\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan\n                    showScanner={this.handleScannerButton}\n                    history={this.props.history}\n                    capabilities={this.state.capabilities}\n                />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";"],"sourceRoot":""}