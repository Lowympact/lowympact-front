{"version":3,"sources":["components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["ButtonHistory","className","ButtonProfil","ButtonScan","Scanner","state","error","noBackCamera","usedCamera","devices","processingImage","text","mutlipleTracks","no_permission","locked","switchCamera","a","setState","num","length","Quagga","stop","QuaggaInit","deviceId","delay","componentDidMount","props","capabilities","facingMode","console","log","Object","keys","init","inputStream","type","constraints","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","window","navigator","hardwareConcurrency","decoder","readers","multiple","singleChannel","err","JSON","stringify","start","setQuagga","CameraAccess","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","src","codeResult","code","setImport","offDetected","this","textImage","Fragment","id","onClick","style","color","withIcon","withPreview","buttonText","onChange","label","imgExtension","maxFileSize","labelClass","Component","ms","Promise","res","setTimeout","Scan","scanning","status","results","usedCameraId","reading","barcode","undefined","bcProductId","product","online","onLine","addEventListener","updateNetwork","quagga","fetch","response","json","handleScan","data","arr","split","handleError","displayQrCode","onError","onScan","width","showViewFinder","displayBarCode","switchReader","displayPopup","retour","item","to","image_url","alt","product_name","brands","getColor","ecoscore_score","indexOf","ecoscore_grade","marginRight","class","hideScannerAnimation","showScanner","note","Navbar","height","updateWindowDimensions","queryString","location","search","urlParams","URLSearchParams","get","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","enumerateDevices","then","filter","d","kind","videoDevices","match","map","device","video","exact","stream","getVideoTracks","track","getCapabilities","getTracks","forEach","all","capa","sort","b","max","innerHeight","handleScannerButton","bool","render","history","pathname","removeEventListener","React"],"mappings":"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","file":"static/js/2.3ec32147.chunk.js","sourcesContent":["import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        noBackCamera: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n        mutlipleTracks: false,\n        no_permission: false,\n        locked: false,\n    };\n\n    locked = false;\n\n    switchCamera = async () => {\n        if (!this.state.locked) {\n            this.setState({ locked: true });\n            let num = this.state.usedCamera + 1;\n            if (num >= this.state.devices.length) {\n                num = 0;\n            }\n            this.setState({ usedCamera: num });\n            Quagga.stop();\n            this.QuaggaInit(this.state.devices[num].deviceId);\n            await delay(800);\n            this.setState({ locked: false });\n        }\n    };\n\n    componentDidMount = async () => {\n        if (this.props.capabilities) {\n            this.setState({ devices: this.props.capabilities, usedCamera: 0 });\n            this.QuaggaInit(this.props.capabilities[0]);\n        } else {\n            this.QuaggaInit({ facingMode: \"environment\" });\n        }\n    };\n\n    QuaggaInit = (capabilities) => {\n        console.log(capabilities);\n        if (Object.keys(capabilities).length == 0) {\n            this.setState({ text: \"vide\" });\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...capabilities,\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"40%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"40%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    console.log(err);\n                    if (err == \"NotAllowedError: Permission denied\") {\n                        this.setState({ no_permission: true });\n                    }\n                    this.setState({ error: true, text: err + \" \" + JSON.stringify(capabilities) });\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        console.log(Quagga.CameraAccess);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            // Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    setImport = () => {\n        this.setState({ error: !this.state.error });\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div className=\"interactive-wrapper\">\n                    <div id=\"interactive\" className={this.state.error ? \"hidden\" : \"viewport\"}>\n                        <div className=\"a\" />\n                        <div className=\"b\" />\n                        <div className=\"c\" />\n                        <div className=\"d\" />\n                    </div>\n                    {this.state.devices?.length > 1 ? (\n                        <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                            <span\n                                className=\"material-icons\"\n                                style={{ color: this.state.locked ? \"#777777\" : \"#1b3044\" }}\n                            >\n                                cameraswitch\n                            </span>\n                            {this.state.usedCamera}\n                        </button>\n                    ) : (\n                        <React.Fragment />\n                    )}\n\n                    {/* <button className=\"code-switch-camera\" onClick={this.setImport}>\n                        <span className=\"material-icons green\">\n                            {!this.state.error ? \"upload_file\" : \"flip\"}\n                        </span>\n                    </button> */}\n\n                    {this.state.error ? (\n                        <div className=\"scan-error\">\n                            <ImageUploader\n                                withIcon={true}\n                                withPreview={false}\n                                buttonText={\n                                    <div className=\"button-import\">\n                                        <div className=\"material-icons\">add_a_photo</div>\n                                        <p>Importer une photo</p>\n                                    </div>\n                                }\n                                onChange={this.onDrop}\n                                label={\"\"}\n                                imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                                maxFileSize={5242880}\n                                labelClass={\"import-label\"}\n                            />\n                            <p className=\"red\">{textImage}</p>\n                            <p className=\"error-message-import\">\n                                {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                                {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                                {/* {\"code d'erreur : \" + this.state.text} */}\n                                {this.state.no_permission ? (\n                                    <div className=\"no-permission\">\n                                        L'accès à votre caméra est bloqué : Vous pouvez l'autoriser\n                                        dans les paramètres de votre navigateur pour accéder au\n                                        scanner\n                                    </div>\n                                ) : (\n                                    <React.Fragment />\n                                )}\n                                <br />\n                            </p>\n                        </div>\n                    ) : (\n                        <React.Fragment />\n                    )}\n                    {this.state.mutlipleTracks ? (\n                        <h1 className=\"debug\">If you see this, tell me</h1>\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"debug\">{this.state.text}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport { Link } from \"react-router-dom\";\nimport \"./Scan.css\";\nimport \"../../pages/History.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n        product: undefined,\n        online: window.navigator.onLine,\n    };\n\n    componentDidMount = () => {\n        window.addEventListener(\"offline\", this.updateNetwork);\n        window.addEventListener(\"online\", this.updateNetwork);\n    };\n\n    updateNetwork = () => {\n        this.setState({ online: window.navigator.onLine });\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            console.log(res);\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                console.log(result);\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: true,\n                        status: \"found\",\n                        product: result,\n                        barcode: res.codeResult.code,\n                    });\n                    // this.props.showScanner(false);\n                    // if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState(\n                        {\n                            scanning: true,\n                            status: \"not found\",\n                        },\n                        async () => {\n                            await delay(3000);\n                            this.setState({\n                                scanning: true,\n                                status: undefined,\n                            });\n                        }\n                    );\n\n                    return false;\n                }\n            }\n        }\n    };\n    // For QR CODE Scanner, not used\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            // if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        // if (this.state.status !== \"found\") {\n        return (\n            <React.Fragment>\n                {this.state.scanning ? (\n                    <Scanner\n                        onDetected={this._onDetected}\n                        setQuagga={this.setQuagga}\n                        usedCameraId={this.usedCameraId}\n                        capabilities={this.props.capabilities}\n                    />\n                ) : null}\n            </React.Fragment>\n        );\n        // } else {\n        //     return <React.Fragment />;\n        // }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    displayPopup = () => {\n        console.log(this.state.product);\n        let retour = <React.Fragment />;\n        let item = this.state.product?.product;\n        if (item) {\n            retour = (\n                <Link className=\"history-item\" to={\"/products/\" + this.state.product.code}>\n                    <div className=\"history-img-container\">\n                        <img src={item.image_url} alt=\"\" />\n                    </div>\n                    <div className=\"history-name-container\">\n                        <div className=\"history-name\">{item.product_name}</div>\n                        <div className=\"history-brand\">{item.brands}</div>\n                    </div>\n                    <div className=\"history-label-container\">\n                        <div style={{ color: getColor(item.ecoscore_score) }}>●</div>\n                        <div className=\"history-label\">\n                            {[\"a\", \"b\", \"c\", \"d\", \"e\"].indexOf(item.ecoscore_grade) == -1\n                                ? \"\"\n                                : item.ecoscore_grade}\n                        </div>\n                    </div>\n                    <div style={{ marginRight: \"10px\", color: \"rgb(41,72,102)\" }}>{\">\"}</div>\n                </Link>\n            );\n        } else if (this.state.status == \"waiting\") {\n            retour = (\n                <div className=\"history-item\">\n                    <div class=\"skeleton-8wwpnkj1sj9\"></div>\n                </div>\n            );\n        } else if (this.state.status == \"not found\") {\n            retour = (\n                <div className=\"history-item\">\n                    <div className=\"history-img-container\">\n                        <div className=\"grey-square\"></div>\n                    </div>\n                    <div className=\"history-name-container\">\n                        <div className=\"history-name\">Article non trouvé</div>\n                        <div className=\"history-brand\"></div>\n                    </div>\n                    <div className=\"history-label-container\"></div>\n                    <div style={{ marginRight: \"10px\", color: \"rgb(41,72,102)\" }}>{\">\"}</div>\n                </div>\n            );\n        }\n        return retour;\n    };\n\n    render() {\n        return (\n            <div\n                className={\n                    this.props.hideScannerAnimation\n                        ? \"code-reader-container hide-scanner\"\n                        : \"code-reader-container\"\n                }\n            >\n                {!this.state.online ? (\n                    <div className=\"offline-container\">\n                        {\" \"}\n                        <span style={{ color: \"red\" }}>●</span> Pas de connexion\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n                <span\n                    className=\"close material-icons\"\n                    onClick={() => {\n                        if (this.state.Quagga) this.state.Quagga.stop();\n\n                        this.props.showScanner(false);\n                    }}\n                >\n                    close\n                </span>\n                {this.displayBarCode()}\n                <div className=\"scan-result-container\">\n                    <div className=\"results\">{this.displayPopup()}</div>\n                </div>\n            </div>\n        );\n        //}\n    }\n}\n\nexport default Scan;\n\nfunction getColor(note) {\n    if (note > 67) {\n        return \"green\";\n    }\n    if (note <= 33) {\n        return \"red\";\n    }\n    return \"yellow\";\n}\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n// if (\n//     this.state.barcode &&\n//     this.state.bcProductId &&\n//     (this.props.barcode !== this.state.barcode ||\n//         this.props.bcProductId !== this.state.bcProductId)\n// ) {\n//     return (\n//         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n//     );\n// }\n// if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n//     return <Redirect to={\"/products/\" + this.state.barcode} />;\n// } else {\n{\n    /* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */\n}\n{\n    /* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */\n}\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n        capabilities: undefined,\n        hideScannerAnimation: false,\n    };\n\n    componentDidMount = async () => {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        try {\n            const queryString = window.location.search;\n            const urlParams = new URLSearchParams(queryString);\n            const camera = urlParams.get(\"camera\");\n            if (\n                navigator.getUserMedia ||\n                navigator.webkitGetUserMedia ||\n                navigator.mozGetUserMedia ||\n                navigator.msGetUserMedia\n            ) {\n                // On vient récupérer les flux vidéo existants\n                let devices = await navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                        return devices.filter((d) => d.kind === \"videoinput\");\n                    });\n\n                //On prend seulement les caméras arrière\n                //(toutes les caméra si caméra arrière non existante)\n                let videoDevices = devices.filter((d) => d.label.match(/back/) != null);\n                if (videoDevices.length === 0) {\n                    videoDevices = devices;\n                }\n                console.log(videoDevices);\n                // Get all camera capabilities\n                let capabilities = videoDevices.map(async (device) => {\n                    return await navigator.mediaDevices\n                        .getUserMedia({\n                            video: { deviceId: { exact: device.deviceId } },\n                        })\n                        .then(\n                            (stream) => {\n                                let a = stream.getVideoTracks().map((track) => {\n                                    console.log(track);\n                                    if (track.getCapabilities) {\n                                        return track.getCapabilities();\n                                    } else {\n                                        return [{}];\n                                    }\n                                });\n                                stream.getTracks().forEach((track) => track.stop());\n                                if (a && a.length > 0) return a[0];\n                                else return {};\n                            },\n                            (err) => console.log(err)\n                        );\n                });\n                let capa = await Promise.all(capabilities);\n                if (capa && capa.length > 0) {\n                    //On trie les capabilities pour mettre les meilleurs résolutions en premier\n                    capa.sort((a, b) => {\n                        if ((a.width.max + a.height.max) / 2 > (b.width.max + b.height.max) / 2)\n                            return -1;\n                        else return 1;\n                    });\n                }\n\n                if (capa[0]) {\n                    this.setState({ capabilities: capa });\n                } else this.setState({ capabilities: undefined });\n            } else {\n                this.setState({ capabilities: undefined });\n            }\n        } catch (err) {\n            this.setState({ capabilities: undefined });\n        }\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        if (bool === false) {\n            this.setState({ hideScannerAnimation: true }, async () => {\n                await delay(300);\n                this.setState({ showScanner: bool, hideScannerAnimation: false });\n            });\n        } else {\n            this.setState({ showScanner: bool });\n        }\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan\n                    hideScannerAnimation={this.state.hideScannerAnimation}\n                    showScanner={this.handleScannerButton}\n                    history={this.props.history}\n                    capabilities={this.state.capabilities}\n                />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n"],"sourceRoot":""}