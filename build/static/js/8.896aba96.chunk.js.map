{"version":3,"sources":["pages/Avis.js","assets/images/logo.svg","components/Header/Header.js","assets/images/bitmap.png","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["Avis","state","value","sent","componentDidMount","Verify","isExpired","token","localStorage","getItem","decodedToken","jwt","decode","complete","dateNow","Date","payload","exp","getTime","clear","props","history","push","setValue","input","setState","target","send","userId","fetch","method","credentials","headers","Headers","Authorization","body","JSON","stringify","message","then","response","json","res","console","log","success","render","button","Fragment","onClick","to","className","placeholder","maxLength","onChange","React","Component","Header","src","blob","alt","logo","ButtonHistory","ButtonProfil","ButtonScan","Scanner","error","usedCamera","devices","processingImage","text","switchCamera","num","length","Quagga","stop","QuaggaInit","deviceId","a","queryString","window","location","search","urlParams","URLSearchParams","get","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","usedCameraId","undefined","mediaDevices","enumerateDevices","videoDevices","forEach","device","kind","label","match","maxResolution","i","video","exact","stream","getVideoTracks","track","capabilities","getCapabilities","height","max","getTracks","err","width","init","inputStream","type","constraints","focusMode","min","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","hardwareConcurrency","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","onDrop","image","reader","FileReader","readAsDataURL","onloadend","decodeSingle","codeResult","code","offDetected","this","textImage","id","withIcon","withPreview","buttonText","imgExtension","maxFileSize","labelClass","Scan","scanning","status","results","reading","barcode","bcProductId","quagga","_scan","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","showViewFinder","displayBarCode","map","switchReader","Navbar","updateWindowDimensions","innerHeight","handleScannerButton","bool","pathname","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/8.896aba96.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Avis.css\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Header/Header\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport jwt from \"jsonwebtoken\";\n\nclass Avis extends React.Component {\n    state = {\n        value: \"\",\n        sent: 0,\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === true) {\n            localStorage.clear();\n            this.props.history.push(\"/login\");\n        }\n    };\n\n    setValue = (input) => {\n        this.setState({ value: input.target.value });\n    };\n\n    send = () => {\n        let userId = localStorage.getItem(\"userId\");\n        this.setState({ sent: 1 });\n        if (userId) {\n            fetch(\n                `https://api.lowympact.fr/api/v1/users/${userId}/review`,\n                // `http://localhost:8080/api/v1/users/${this.state.userId}/history`,\n                {\n                    method: \"put\",\n                    credentials: \"include\",\n                    headers: new Headers({\n                        Authorization: localStorage.getItem(\"token\"),\n                        \"api-key\": \"99d8fb95-abdd-4885-bf6c-3a81d8874043\",\n                        \"Content-Type\": \"application/json\",\n                    }),\n                    body: JSON.stringify({\n                        message: this.state.value,\n                    }),\n                }\n            )\n                .then((response) => response.json())\n                .then((res) => {\n                    console.log(res);\n                    if (res.success) {\n                        this.setState({ sent: 2 });\n                    } else {\n                        this.setState({ sent: 3 });\n                    }\n                });\n        }\n    };\n\n    render = () => {\n        let button = <React.Fragment />;\n        if (this.state.sent == 0) {\n            button = <button onClick={this.send}>Envoyer ! </button>;\n        }\n        if (this.state.sent == 1) {\n            button = <div>Envoi en cours ...</div>;\n        }\n        if (this.state.sent == 2) {\n            button = <div> Message bien envoyé ! </div>;\n        }\n        if (this.state.sent == 3) {\n            button = <div>Erreur de réseau, merci de réessayer plus tard :/</div>;\n        }\n        return (\n            <div>\n                <Link to=\"/\">\n                    <Header />\n                </Link>\n\n                <Navbar />\n                <div className=\"avis-container\">\n                    <div className=\"avis\">\n                        <h2>Votre avis est important pour nous !</h2>\n                        <p>\n                            Cette application est le résultat d'un petit projet de 6 étudiants\n                            Lyonnais, et à besoin de nombreuses améliorations !\n                        </p>\n                        <p>\n                            Vos retours nous aident à nous améliorer, n'hésitez pas à nous écrire !{\" \"}\n                        </p>\n                        <textarea\n                            placeholder=\" Donnez-nous votre avis ! \"\n                            maxLength={500}\n                            value={this.state.value}\n                            onChange={this.setValue}\n                        ></textarea>\n                        {button}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Avis;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"@ericblade/quagga2\";\nimport ImageUploader from \"react-images-upload\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        usedCamera: 0,\n        devices: [],\n        processingImage: 0,\n        text: 0,\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const camera = urlParams.get(\"camera\");\n        if (camera == \"false\") {\n            this.setState({ error: true, text: 1 });\n        } else if (\n            navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.msGetUserMedia\n        ) {\n            let usedCameraId = undefined;\n            const devices = await navigator.mediaDevices\n                .enumerateDevices()\n                .then(function (devices) {\n                    return devices;\n                });\n            let videoDevices = [];\n            devices.forEach((device) => {\n                if (device.kind === \"videoinput\") {\n                    videoDevices.push(device);\n                    if (device.label.match(/back/) != null) {\n                        //     ////console.log(\"Found video device: \" + JSON.stringify(device));\n                    }\n                }\n            });\n            // ALL  cameras\n            this.setState({ devices: videoDevices });\n\n            // open every video device and dump its characteristics\n            let maxResolution = -1;\n            for (let i in videoDevices) {\n                const device = videoDevices[i];\n                // //console.log(\"Opening video device \" + device.deviceId + \" (\" + device.label + \")\");\n\n                await navigator.mediaDevices\n                    .getUserMedia({\n                        video: { deviceId: { exact: device.deviceId } },\n                    })\n                    .then(\n                        (stream) => {\n                            stream.getVideoTracks().forEach((track) => {\n                                const capabilities = track.getCapabilities();\n\n                                if (\n                                    capabilities.height.max >= maxResolution &&\n                                    device.label.match(/back/) != null\n                                ) {\n                                    maxResolution = capabilities.height.max;\n                                    usedCameraId = device.deviceId;\n                                    this.setState({ usedCamera: i });\n                                }\n\n                                ////console.log(\"Track capabilities: \" + JSON.stringify(capabilities));\n                            });\n\n                            stream.getTracks().forEach((track) => track.stop());\n                        },\n                        (err) => console.log(err)\n                    );\n            }\n            this.QuaggaInit(usedCameraId);\n        } else {\n            this.setState({ error: true, text: 3 });\n        }\n    };\n\n    QuaggaInit = (usedCameraId, width = 1920, height = 1080) => {\n        let deviceId = { deviceId: usedCameraId };\n        if (!deviceId.deviceId) {\n            deviceId = {};\n        }\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        ...deviceId,\n                        focusMode: \"continuous\",\n                        width: { min: width },\n                        height: { min: height },\n                        // aspectRatio: {\n                        //     min: 1,\n                        //     max: 2,\n                        // },\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"30%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"30%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                debug: {\n                    drawBoundingBox: true,\n                    showFrequency: true,\n                    drawScanline: true,\n                    showPattern: true,\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    //console.log(err);\n                    if (width != 960 && height != 540) {\n                        this.QuaggaInit(usedCameraId, 960, 540);\n                        // console.log(\"here\");\n                    } else {\n                        this.setState({ error: true, text: 4 });\n                    }\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    onDrop = (image) => {\n        try {\n            if (this.state.processingImage != 1) {\n                this.setState({ processingImage: 1 });\n                console.log(image[image.length - 1]);\n                let reader = new FileReader();\n                reader.readAsDataURL(image[image.length - 1]);\n                reader.onloadend = () => {\n                    Quagga.decodeSingle(\n                        {\n                            decoder: {\n                                readers: [\"ean_reader\"], // List of active readers\n                            },\n                            locate: true, // try to locate the barcode in the image\n                            src: reader.result, //image[image.length - 1], // or 'data:image/jpg;base64,' + data\n                        },\n                        (result) => {\n                            console.log(result);\n                            if (result) {\n                                this._onDetected(result);\n                                this.setState({ processingImage: 2 });\n                                console.log(\"result\", result.codeResult?.code);\n                            } else {\n                                console.log(\"not detected\");\n                                this.setState({ processingImage: 3 });\n                            }\n                        }\n                    );\n                };\n            }\n        } catch (err) {\n            console.log(err);\n            this.setState({ processingImage: 4 });\n        }\n    };\n\n    render() {\n        let textImage = <React.Fragment></React.Fragment>;\n\n        if (this.state.processingImage == 1) {\n            textImage = (\n                <React.Fragment>\n                    <p>Chargement en cours...</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 2) {\n            textImage = (\n                <React.Fragment>\n                    <p>Ce produit n'existe pas dans la base de données</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 3) {\n            textImage = (\n                <React.Fragment>\n                    <p>Code barre non trouvé sur l'image, merci de réessayer</p>\n                </React.Fragment>\n            );\n        }\n        if (this.state.processingImage == 4) {\n            textImage = (\n                <React.Fragment>\n                    <p>\n                        Mauvais format ou fichier trop grand, merci de réessayer. <br />\n                        Taille max : 5mb <br />\n                        Formats: jpg, png, gif\n                    </p>\n                </React.Fragment>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className=\"viewport\" />\n\n                {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        <ImageUploader\n                            withIcon={true}\n                            withPreview={false}\n                            buttonText={\n                                <div className=\"button-import\">\n                                    <div className=\"material-icons\">add_a_photo</div>\n                                    <p>Prendre une photo</p>\n                                </div>\n                            }\n                            onChange={this.onDrop}\n                            label={\"\"}\n                            imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\n                            maxFileSize={5242880}\n                            labelClass={\"import-label\"}\n                        />\n                        <p className=\"red\">{textImage}</p>\n                        <p className=\"error-message-import\">\n                            {/* Il semblerait que votre caméra ne soit pas détectée. Vous pouvez\n                            importer une photo de votre bibliothèque, ou essayer un autre\n                            navigateur. <br />\n                            <br /> */}\n                            {/* Si le problème persiste, contactez-nous{\" \"}\n                            <a href=\"mailto:contact@lowympact.fr?Subject=Lowympact-camera not working\">\n                                via ce lien\n                            </a> */}\n                            {\"code d'erreur : \" + this.state.text}\n                            <br />\n                        </p>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n                {\n                    <p className=\"debug\">\n                        {this.state?.devices[this.state.usedCamera]?.deviceId + \"-\"}\n                    </p>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: false, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code : \" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"Code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    {/* <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div> */}\n                    {/* {this.state.reading ? this.displayQrCode() : this.displayBarCode()} */}\n                    {this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n"],"sourceRoot":""}