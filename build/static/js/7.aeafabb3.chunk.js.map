{"version":3,"sources":["pages/Profil.js","assets/images/logo.svg","assets/images/bitmap.png","components/Header/Header.js","components/Button/ButtonHistory.js","components/Button/ButtonProfil.js","components/Button/ButtonScan.js","components/Scan/Scanner.js","components/Scan/Scan.js","components/Navbar/Navbar.js"],"names":["Profil","state","connected","disconnect","localStorage","clear","props","history","push","componentDidMount","Verify","isExpired","token","getItem","decodedToken","jwt","decode","complete","dateNow","Date","payload","exp","getTime","setState","displayConnectedProfil","Fragment","className","to","onClick","displayUnconnectedProfil","this","React","Component","Header","src","blob","alt","logo","ButtonHistory","ButtonProfil","ButtonScan","Scanner","error","usedCamera","devices","switchCamera","num","length","Quagga","stop","QuaggaInit","deviceId","a","navigator","mediaDevices","enumerateDevices","then","videoDevices","forEach","device","kind","maxResolution","i","getUserMedia","video","exact","stream","getVideoTracks","track","capabilities","getCapabilities","height","max","label","match","usedCameraId","getTracks","err","console","log","width","init","inputStream","type","constraints","focusMode","min","aspectRatio","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","window","hardwareConcurrency","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","singleChannel","start","setQuagga","onDetected","_onDetected","result","offDetected","id","href","Scan","scanning","status","results","reading","barcode","undefined","bcProductId","quagga","_scan","res","codeResult","code","fetch","response","json","showScanner","handleScan","data","arr","split","handleError","displayQrCode","delay","onError","onScan","style","showViewFinder","displayBarCode","map","switchReader","onChange","uncheckedIcon","checkedIcon","checked","onColor","offColor","Navbar","updateWindowDimensions","innerHeight","handleScannerButton","bool","render","location","pathname","addEventListener","removeEventListener"],"mappings":"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","file":"static/js/7.aeafabb3.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport Header from \"../components/Header/Header\";\nimport \"./Profil.css\";\nimport { Link } from \"react-router-dom\";\nimport jwt from \"jsonwebtoken\";\n\nclass Profil extends React.Component {\n    state = {\n        connected: false,\n    };\n\n    disconnect = () => {\n        localStorage.clear();\n        this.props.history.push(\"/login\");\n    };\n\n    componentDidMount = () => {\n        this.Verify();\n    };\n\n    Verify = () => {\n        let isExpired = true;\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            var decodedToken = jwt.decode(token, { complete: true });\n            var dateNow = new Date();\n            if (decodedToken.payload.exp >= dateNow.getTime() / 1000) {\n                isExpired = false;\n            }\n        }\n        if (isExpired === false) {\n            this.setState({ connected: true }); // redirection vers la page login\n        }\n    };\n\n    displayConnectedProfil = () => {\n        return (\n            <React.Fragment>\n                <h2 className=\"profil-title\">Bienvenue sur ton profil!</h2>\n                <Link to=\"/stats\" className=\"profil-button\">\n                    Statistiques\n                </Link>\n                <Link to=\"/configuration\" className=\"profil-button\">\n                    Configuration\n                </Link>\n                <div onClick={this.disconnect} className=\"profil-button\">\n                    Déconnecter\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    displayUnconnectedProfil = () => {\n        return (\n            <React.Fragment>\n                <h2 className=\"profil-title\">Non connecté</h2>\n                <p>Connecte toi pour que ton historique soit sauvegardé !</p>\n                <Link to=\"/login\" className=\"profil-button\">\n                    Me Connecter\n                </Link>\n            </React.Fragment>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <Link to=\"/\">\n                    <Header />\n                </Link>\n                <div className=\"profil-screen\">\n                    <div className=\"profil-picture\">\n                        <div className=\"material-icons\">person</div>\n                    </div>\n                    {this.state.connected\n                        ? this.displayConnectedProfil()\n                        : this.displayUnconnectedProfil()}\n                </div>\n                <Navbar />\n            </div>\n        );\n    }\n}\n\nexport default Profil;\n","export default __webpack_public_path__ + \"static/media/logo.b235ef42.svg\";","export default __webpack_public_path__ + \"static/media/bitmap.6f490d5b.png\";","import \"./Header.css\";\nimport logo from \"../../assets/images/logo.svg\";\nimport blob from \"../../assets/images/bitmap.png\";\nimport React from \"react\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <div>\n                <img src={blob} className=\"blob-top\" alt=\"Blob\" />\n            </div>\n            {props.history ? (\n                <React.Fragment />\n            ) : (\n                <React.Fragment>\n                    <div>\n                        <img src={blob} className=\"blob-left\" alt=\"Blob\" />\n                    </div>\n                    <div>\n                        <img src={blob} className=\"blob-right\" alt=\"Blob\" />\n                    </div>{\" \"}\n                </React.Fragment>\n            )}\n            <div className=\"header-container\">\n                <img src={logo} className=\"header-logo\" alt=\"Logo\" />\n                <span>Lowympact</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import \"./ButtonNavBar.css\";\n\nfunction ButtonHistory() {\n    return (\n        <div>\n            <div className=\"button-logo\">\n                <span className=\"material-icons\">history</span>\n            </div>\n            <div>Historique</div>\n        </div>\n    );\n}\n\nexport default ButtonHistory;\n","function ButtonProfil() {\n    return (\n        <div>\n            <div>\n                <span className=\"material-icons\">person</span>\n            </div>\n            <div>Profil</div>\n        </div>\n    );\n}\n\nexport default ButtonProfil;\n","import { React } from \"react\";\n\nfunction ButtonScan() {\n    return (\n        <div>\n            <div className=\"navbar-scan-icon\">\n                <span className=\"material-icons\">qr_code_scanner</span>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonScan;\n","import React, { Component } from \"react\";\nimport Quagga from \"quagga\";\n\nclass Scanner extends Component {\n    state = {\n        error: false,\n        usedCamera: 0,\n        devices: [],\n    };\n\n    switchCamera = () => {\n        let num = this.state.usedCamera + 1;\n        if (num >= this.state.devices.length) {\n            num = 0;\n        }\n        this.setState({ usedCamera: num });\n        Quagga.stop();\n        this.QuaggaInit(this.state.devices[num].deviceId);\n    };\n\n    componentDidMount = async () => {\n        let usedCameraId;\n        const devices = await navigator.mediaDevices.enumerateDevices().then(function (devices) {\n            return devices;\n        });\n        let videoDevices = [];\n        devices.forEach((device) => {\n            if (device.kind === \"videoinput\") {\n                videoDevices.push(device);\n                // if (device.label.match(/back/) != null) {\n                //     ////console.log(\"Found video device: \" + JSON.stringify(device));\n                // }\n            }\n        });\n        // ALL  cameras\n        //console.log(videoDevices);\n        this.setState({ devices: videoDevices });\n\n        // open every video device and dump its characteristics\n        let maxResolution = -1;\n        for (let i in videoDevices) {\n            const device = videoDevices[i];\n            // //console.log(\"Opening video device \" + device.deviceId + \" (\" + device.label + \")\");\n\n            await navigator.mediaDevices\n                .getUserMedia({\n                    video: { deviceId: { exact: device.deviceId } },\n                })\n                .then(\n                    (stream) => {\n                        stream.getVideoTracks().forEach((track) => {\n                            const capabilities = track.getCapabilities();\n\n                            if (\n                                capabilities.height.max >= maxResolution &&\n                                device.label.match(/back/) != null\n                            ) {\n                                maxResolution = capabilities.height.max;\n                                usedCameraId = device.deviceId;\n                                this.setState({ usedCamera: i });\n                            }\n\n                            ////console.log(\"Track capabilities: \" + JSON.stringify(capabilities));\n                        });\n\n                        stream.getTracks().forEach((track) => track.stop());\n                    },\n                    (err) => console.log(err)\n                );\n        }\n        this.QuaggaInit(usedCameraId);\n    };\n\n    QuaggaInit = (usedCameraId, width = 1920, height = 1080) => {\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        deviceId: usedCameraId,\n                        focusMode: \"continuous\",\n                        width: { min: width },\n                        height: { min: height },\n                        aspectRatio: {\n                            min: 1,\n                            max: 2,\n                        },\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"25%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"25%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                debug: {\n                    drawBoundingBox: true,\n                    showFrequency: true,\n                    drawScanline: true,\n                    showPattern: true,\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            (err) => {\n                if (err) {\n                    //console.log(err);\n                    if (width != 960 && height != 540) {\n                        this.QuaggaInit(usedCameraId, 960, 540);\n                    } else {\n                        this.setState({ error: true });\n                    }\n                    return false;\n                }\n                Quagga.start();\n            }\n        );\n        this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        let stop = await this.props.onDetected(result);\n        //console.log(stop);\n        if (stop) {\n            Quagga.stop();\n        }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className=\"viewport\" />\n                {this.state.devices?.length > 1 ? (\n                    <button className=\"code-switch-camera\" onClick={this.switchCamera}>\n                        <span className=\"material-icons\">cameraswitch</span>\n                        {this.state.usedCamera}\n                    </button>\n                ) : (\n                    <React.Fragment />\n                )}\n                {this.state.error ? (\n                    <div className=\"scan-error\">\n                        Il semblerait que votre caméra ne soit pas détectée. Essayez de changer de\n                        navigateur. Si le problème persiste, contactez-nous{\" \"}\n                        <a href=\"mailto:corentin.branchereau@insa-lyon.fr?Subject=Lowympact-camera not working\">\n                            via ce lien\n                        </a>\n                    </div>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Scanner;\n","import React, { Component } from \"react\";\nimport Scanner from \"./Scanner\";\nimport QrReader from \"react-qr-reader\";\nimport Switch from \"react-switch\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./Scan.css\";\n\nclass Scan extends Component {\n    state = {\n        scanning: true,\n        status: \"\",\n        results: [],\n        usedCameraId: \"3f6fc4177028f25c3e8215f4444838450630b8d656c627ef511346545d37f302\",\n        devices: [],\n        reading: 0, //false : barcode - true: qrcode\n        barcode: undefined,\n        bcProductId: undefined,\n        Quagga: undefined,\n    };\n\n    setQuagga = (quagga) => {\n        if (this.state.Quagga) {\n            this.state.Quagga.stop();\n        }\n        this.setState({ Quagga: quagga });\n    };\n\n    _scan = () => {\n        this.setState({ scanning: !this.state.scanning, status: \"\" });\n    };\n\n    _onDetected = async (res) => {\n        if (res) {\n            if (res.codeResult && res.codeResult.code) {\n                this.setState({\n                    results: [res],\n                    scanning: true,\n                    status: \"waiting\",\n                });\n                let response = await fetch(\n                    `https://world.openfoodfacts.org/api/v0/product/${res.codeResult.code}.json/`\n                );\n                let result = await response.json();\n                if (result.status !== 0) {\n                    this.setState({\n                        scanning: false,\n                        status: \"found\",\n                        barcode: res.codeResult.code,\n                    });\n                    this.props.showScanner(false);\n                    if (this.state.Quagga) this.state.Quagga.stop();\n                    return true;\n                } else {\n                    this.setState({\n                        scanning: true,\n                        status: \"not found\",\n                    });\n                    return false;\n                }\n            }\n        }\n    };\n\n    handleScan = (data) => {\n        if (data) {\n            let arr = data.split(\"/\");\n            if (arr.length > 1) {\n                this.setState({\n                    scanning: false,\n                    barcode: arr[4],\n                    bcProductId: arr[5],\n                    status: \"found\",\n                });\n            }\n            if (this.state.Quagga) this.state.Quagga.stop();\n        }\n    };\n    handleError = (err) => {\n        console.error(err);\n    };\n\n    displayQrCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{ width: \"100%\" }}\n                    showViewFinder={false}\n                />\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    displayBarCode = () => {\n        if (this.state.status !== \"found\") {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <ul className=\"results\">\n                            {this.state.results.map((result, i) => (\n                                <div key={result.codeResult.code + i}>\n                                    {this.state.status === \"waiting\"\n                                        ? \"Vérification du code\" + result?.codeResult?.code\n                                        : \"\"}\n                                    {this.state.status === \"not found\"\n                                        ? \"code non trouvé, merci de réessayer\"\n                                        : \"\"}\n                                </div>\n                            ))}\n                        </ul>\n                    </div>\n                    {this.state.scanning ? (\n                        <Scanner\n                            onDetected={this._onDetected}\n                            setQuagga={this.setQuagga}\n                            usedCameraId={this.usedCameraId}\n                        />\n                    ) : null}\n                </React.Fragment>\n            );\n        } else {\n            return <React.Fragment />;\n        }\n    };\n\n    switchReader = () => {\n        if (this.state.reading) this.setState({ reading: false });\n        else {\n            if (this.state.Quagga) this.state.Quagga.stop();\n            this.setState({ reading: true });\n        }\n    };\n\n    render() {\n        if (\n            this.state.barcode &&\n            this.state.bcProductId &&\n            (this.props.barcode !== this.state.barcode ||\n                this.props.bcProductId !== this.state.bcProductId)\n        ) {\n            return (\n                <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n            );\n        }\n        if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n            return <Redirect to={\"/products/\" + this.state.barcode} />;\n        } else {\n            return (\n                <div className=\"code-reader-container\">\n                    <span\n                        className=\"close\"\n                        onClick={() => {\n                            if (this.state.Quagga) this.state.Quagga.stop();\n\n                            this.props.showScanner(false);\n                        }}\n                    >\n                        &times;\n                    </span>\n                    <div className=\"code-switch\" onClick={this.switchReader}>\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                view_week\n                            </span>\n                            <span>Barcode</span>\n                        </div>\n                        <Switch\n                            onChange={this.switchReader}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            checked={this.state.reading}\n                            onColor={\"#888\"}\n                            offColor={\"#888\"}\n                        />\n                        <div className=\"span-code-switch\">\n                            <span\n                                className={\n                                    !this.state.reading ? \"material-icons\" : \"material-icons green\"\n                                }\n                            >\n                                qr_code_scanner\n                            </span>\n                            <span>QR Code</span>\n                        </div>\n                    </div>\n                    {this.state.reading ? this.displayQrCode() : this.displayBarCode()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Scan;\n","import \"./Navbar.css\";\nimport React from \"react\";\nimport ButtonHistory from \"../Button/ButtonHistory\";\nimport ButtonProfil from \"../Button/ButtonProfil\";\nimport ButtonScan from \"../Button/ButtonScan\";\n// import Scan from \"../Scan/Scan\";\nimport Scan from \"../Scan/Scan\";\n// import { ScanSettings } from \"scandit-sdk\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends React.Component {\n    state = {\n        showScanner: false,\n        barcode: undefined,\n        bcProductId: undefined,\n        height: 0,\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions = () => {\n        this.setState({ height: window.innerHeight });\n    };\n\n    handleScannerButton = (bool) => {\n        this.setState({ showScanner: bool });\n    };\n\n    // handleBarcode = (res) => {\n    //     if (res) {\n    //         //détecté par barcode scanner\n    //         let arr = res.split(\"/\");\n    //         if (arr.length > 1) {\n    //             this.setState({\n    //                 barcode: arr[4],\n    //                 bcProductId: arr[5],\n    //                 showScanner: false,\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 barcode: arr[0],\n    //                 showScanner: false,\n    //                 bcProductId: undefined,\n    //             });\n    //         }\n    //     }\n    // };\n\n    render = () => {\n        if (this.state.height < 550) {\n            return <React.Fragment />;\n        }\n        // if (\n        //     this.state.barcode &&\n        //     this.state.bcProductId &&\n        //     (this.props.barcode !== this.state.barcode ||\n        //         this.props.bcProductId !== this.state.bcProductId)\n        // ) {\n        //     return (\n        //         <Redirect to={\"/products/\" + this.state.barcode + \"/\" + this.state.bcProductId} />\n        //     );\n        // }\n\n        // if (this.state.barcode && this.props.barcode !== this.state.barcode) {\n        //     return <Redirect to={\"/products/\" + this.state.barcode} />;\n        // }\n\n        if (!this.state.showScanner) {\n            return (\n                <React.Fragment>\n                    <div className=\"navbar-container\">\n                        <Link\n                            to=\"/history\"\n                            className={\n                                window.location.pathname === \"/history\"\n                                    ? \"navbar-link navbar-text-left navbar-selected\"\n                                    : \"navbar-link navbar-text-left \"\n                            }\n                        >\n                            <ButtonHistory />\n                        </Link>\n                        <div onClick={() => this.handleScannerButton(true)}>\n                            <div className=\"navbar-circle\">\n                                <ButtonScan />\n                            </div>\n                        </div>\n                        <span className=\"navbar-scan-text\">Scan</span>\n                        <Link\n                            to=\"/profil\"\n                            className={\n                                window.location.pathname === \"/profil\"\n                                    ? \"navbar-link navbar-text-right navbar-selected\"\n                                    : \"navbar-link navbar-text-right \"\n                            }\n                        >\n                            <ButtonProfil />\n                        </Link>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                // <Scan\n                //     onCrossClicked={this.handleScannerButton}\n                //     // playSoundOnScan={true}\n                //     vibrateOnScan={true}\n                //     enableTorchToggle={true}\n                //     enablePinchToZoom={true}\n                //     enableCameraSwitcher={true}\n                //     guiStyle={\"viewfinder\"}\n                //     scanSettings={\n                //         new ScanSettings({\n                //             enabledSymbologies: [\n                //                 \"qr\",\n                //                 \"ean8\",\n                //                 \"ean13\",\n                //                 \"upca\",\n                //                 \"upce\",\n                //                 \"code128\",\n                //                 \"code39\",\n                //                 \"code93\",\n                //                 \"itf\",\n                //             ],\n                //             codeDuplicateFilter: 1000,\n                //         })\n                //     }\n                //     onScan={(scanResult) => {\n                //         //console.log(scanResult.barcodes[0].data);\n                //         this.handleBarcode(scanResult.barcodes[0].data);\n                //     }}\n                //     onError={(error) => {\n                //         console.error(error.message);\n                //     }}\n                // />\n                <Scan showScanner={this.handleScannerButton} history={this.props.history} />\n            );\n        }\n    };\n}\n\nexport default Navbar;\n"],"sourceRoot":""}