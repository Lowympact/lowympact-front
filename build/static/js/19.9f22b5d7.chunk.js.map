{"version":3,"sources":["pages/Debug.js"],"names":["Debug","componentDidMount","a","navigator","mediaDevices","enumerateDevices","devices","videoDevices","forEach","device","kind","label","match","push","maxResolution","i","getUserMedia","video","deviceId","exact","then","stream","getVideoTracks","track","capabilities","getCapabilities","height","max","usedCameraId","getTracks","stop","err","console","log","Quagga","init","inputStream","type","constraints","focusMode","width","min","aspectRatio","locator","patchSize","halfSample","locate","area","top","right","left","bottom","numOfWorkers","window","hardwareConcurrency","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","singleChannel","start","onDetected","_onDetected","result","offDetected","this","Fragment","id","className","Component"],"mappings":"sNA+BMA,E,4MACFC,kB,sBAAoB,sCAAAC,EAAA,sEAEMC,UAAUC,aAAaC,mBAF7B,OAEVC,EAFU,OAGZC,EAAe,GACnBD,EAAQE,SAAQ,SAACC,GACM,cAAfA,EAAOC,MAC2B,MAA9BD,EAAOE,MAAMC,MAAM,SAEnBL,EAAaM,KAAKJ,MAO1BK,GAAiB,EAfL,IAAAZ,EAAA,iBAgBPa,GAhBO,eAAAb,EAAA,6DAiBNO,EAASF,EAAaQ,QAjBhB,WAqBYZ,UAAUC,aAC7BY,aAAa,CACVC,MAAO,CAAEC,SAAU,CAAEC,MAAOV,EAAOS,aAEtCE,MACG,SAACC,GACGA,EAAOC,iBAAiBd,SAAQ,SAACe,GAC7B,IAAMC,EAAeD,EAAME,kBAEvBD,EAAaE,OAAOC,KAAOb,IAC3BA,EAAgBU,EAAaE,OAAOC,IACpCC,EAAenB,EAAOS,aAM9BG,EAAOQ,YAAYrB,SAAQ,SAACe,GAAD,OAAWA,EAAMO,aAEhD,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAxCjB,+DAAA7B,EAAA,KAgBFK,GAhBE,qDAgBPQ,EAhBO,6BAgBPA,GAhBO,wCA4ChBmB,IAAOC,KACH,CACIC,YAAa,CACTC,KAAM,aACNC,YAAa,CACTpB,SAAUU,EACVW,UAAW,aACXC,MAAO,CAAEC,IAAK,MACdf,OAAQ,CAAEe,IAAK,MACfC,YAAa,CACTD,IAAK,EACLd,IAAK,KAIjBgB,QAAS,CACLC,UAAW,SACXC,YAAY,GAEhBC,QAAQ,EACRC,KAAM,CACFC,IAAK,MACLC,MAAO,MACPC,KAAM,MACNC,OAAQ,OAEZC,aAAcC,OAAOlD,UAAUmD,qBAAuB,EACtDC,QAAS,CACLC,QAAS,CAAC,eAEdC,MAAO,CACHC,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,GAEjBC,UAAU,EACVC,eAAe,IAEnB,SAAUhC,GACN,GAAIA,EACA,OAAOC,QAAQC,IAAIF,GAEvBG,IAAO8B,WAIf9B,IAAO+B,WAAW,EAAKC,aA3FP,4C,EAkGpBA,Y,uCAAc,WAAOC,GAAP,SAAAjE,EAAA,0F,gHAJd,WACIgC,IAAOkC,YAAYC,KAAKH,e,oBAW5B,WACI,OACI,cAAC,IAAMI,SAAP,UACI,qBAAKC,GAAG,cAAcC,UAAU,mB,GA9G5BC,aAoHLzE","file":"static/js/19.9f22b5d7.chunk.js","sourcesContent":["// import React from \"react\";\n// import \"./Debug.css\";\n// import \"./Profil.css\";\n// import { Link } from \"react-router-dom\";\n// import Header from \"../components/Header/Header\";\n// import Navbar from \"../components/Navbar/Navbar\";\n\n// class Debug extends React.Component {\n//     render = () => {\n//         return (\n//             <div>\n//                 <Link to=\"/\">\n//                     <Header />\n//                 </Link>\n\n//                 <Navbar />\n//                 <div className=\"debug-container\">\n//                     <h1> Problèmes de Caméra </h1>\n//                     <h2>Ma caméra n'est pas activée</h2>\n//                     <p> </p>\n//                     <h2>Ma caméra est activée mais le code barre n'est pas détecté</h2>\n//                 </div>\n//             </div>\n//         );\n//     };\n// }\n\n// export default Debug;\nimport React, { Component } from \"react\";\nimport Quagga from \"quagga\";\n\nclass Debug extends Component {\n    componentDidMount = async () => {\n        let usedCameraId;\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        let videoDevices = [];\n        devices.forEach((device) => {\n            if (device.kind == \"videoinput\") {\n                if (device.label.match(/back/) != null) {\n                    //console.log(\"Found video device: \" + JSON.stringify(device));\n                    videoDevices.push(device);\n                }\n            }\n        });\n\n        // open every video device and dump its characteristics\n\n        let maxResolution = -1;\n        for (let i in videoDevices) {\n            const device = videoDevices[i];\n            // console.log(\"Opening video device \" + device.deviceId + \" (\" + device.label + \")\");\n\n            let stream;\n            const streaming = await navigator.mediaDevices\n                .getUserMedia({\n                    video: { deviceId: { exact: device.deviceId } },\n                })\n                .then(\n                    (stream) => {\n                        stream.getVideoTracks().forEach((track) => {\n                            const capabilities = track.getCapabilities();\n\n                            if (capabilities.height.max >= maxResolution) {\n                                maxResolution = capabilities.height.max;\n                                usedCameraId = device.deviceId;\n                            }\n\n                            //console.log(\"Track capabilities: \" + JSON.stringify(capabilities));\n                        });\n\n                        stream.getTracks().forEach((track) => track.stop());\n                    },\n                    (err) => console.log(err)\n                );\n        }\n\n        Quagga.init(\n            {\n                inputStream: {\n                    type: \"LiveStream\",\n                    constraints: {\n                        deviceId: usedCameraId,\n                        focusMode: \"continuous\",\n                        width: { min: 1920 },\n                        height: { min: 1080 },\n                        aspectRatio: {\n                            min: 1,\n                            max: 2,\n                        },\n                    },\n                },\n                locator: {\n                    patchSize: \"normal\",\n                    halfSample: false,\n                },\n                locate: false,\n                area: {\n                    top: \"25%\",\n                    right: \"25%\",\n                    left: \"25%\",\n                    bottom: \"25%\",\n                },\n                numOfWorkers: window.navigator.hardwareConcurrency || 2,\n                decoder: {\n                    readers: [\"ean_reader\"],\n                },\n                debug: {\n                    drawBoundingBox: true,\n                    showFrequency: true,\n                    drawScanline: true,\n                    showPattern: true,\n                },\n                multiple: false,\n                singleChannel: false,\n            },\n            function (err) {\n                if (err) {\n                    return console.log(err);\n                }\n                Quagga.start();\n            }\n        );\n        // this.props.setQuagga(Quagga);\n        Quagga.onDetected(this._onDetected);\n    };\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected = async (result) => {\n        // let stop = await this.props.onDetected(result);\n        // console.log(stop);\n        // if (stop) {\n        // Quagga.stop();\n        // }\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <div id=\"interactive\" className=\"viewport\" />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Debug;\n"],"sourceRoot":""}